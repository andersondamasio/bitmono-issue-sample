<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Echo.Platforms.AsmResolver</name>
    </assembly>
    <members>
        <member name="T:Echo.Platforms.AsmResolver.AsmResolverExtensions">
            <summary>
            Provides extension methods to AsmResolver models.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.AsmResolverExtensions.ToEchoRange(AsmResolver.DotNet.Code.Cil.CilExceptionHandler)">
            <summary>
            Converts an instance of <see cref="T:AsmResolver.DotNet.Code.Cil.CilExceptionHandler"/> to an <see cref="T:Echo.ControlFlow.Regions.Detection.ExceptionHandlerRange"/>. 
            </summary>
            <param name="handler">The handler to convert.</param>
            <returns>The converted handler.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.AsmResolverExtensions.ToEchoRanges(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Code.Cil.CilExceptionHandler})">
            <summary>
            Converts a collection of <see cref="T:AsmResolver.DotNet.Code.Cil.CilExceptionHandler"/> instances to a collection of
            <see cref="T:Echo.ControlFlow.Regions.Detection.ExceptionHandlerRange"/> instances. 
            </summary>
            <param name="handlers">The handlers to convert.</param>
            <returns>The converted handlers.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.AsmResolverExtensions.ConstructStaticFlowGraph(AsmResolver.DotNet.Code.Cil.CilMethodBody)">
            <summary>
            Constructs a control flow graph from a CIL method body.
            </summary>
            <param name="self">The method body.</param>
            <returns>The control flow graph.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.AsmResolverExtensions.ConstructSymbolicFlowGraph(AsmResolver.DotNet.Code.Cil.CilMethodBody,Echo.DataFlow.DataFlowGraph{AsmResolver.PE.DotNet.Cil.CilInstruction}@)">
            <summary>
            Constructs a control flow graph and a data flow graph from a CIL method body.
            </summary>
            <param name="self">The method body.</param>
            <param name="dataFlowGraph">The constructed data flow graph.</param>
            <returns>The control flow graph.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilArchitecture">
            <summary>
            Provides a description of the CIL instruction set architecture (ISA) that is modelled by AsmResolver.   
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.#ctor(AsmResolver.DotNet.Code.Cil.CilMethodBody)">
            <summary>
            Creates a new CIL architecture description based on a CIL method body.
            </summary>
            <param name="parentBody">The method body.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilArchitecture.MethodBody">
            <summary>
            Gets the method body that was encapsulated.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilArchitecture.SuccessorResolver">
            <summary>
            Gets the default static successor resolution engine for this architecture.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetLocal(AsmResolver.DotNet.Code.Cil.CilLocalVariable)">
            <summary>
            Gets the Echo symbol for the provided <see cref="T:AsmResolver.DotNet.Code.Cil.CilLocalVariable"/> instance.
            </summary>
            <param name="variable">The local variable.</param>
            <returns>The Echo symbol representing the local variable.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetParameter(AsmResolver.DotNet.Collections.Parameter)">
            <summary>
            Gets the Echo symbol for the provided <see cref="T:AsmResolver.DotNet.Collections.Parameter"/> instance.
            </summary>
            <param name="variable">The parameter.</param>
            <returns>The Echo symbol representing the parameter.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetOffset(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetSize(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetFlowControl(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetStackPushCount(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetStackPopCount(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetReadVariablesCount(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetReadVariables(AsmResolver.PE.DotNet.Cil.CilInstruction@,System.Span{Echo.Code.IVariable})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetWrittenVariablesCount(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetWrittenVariables(AsmResolver.PE.DotNet.Cil.CilInstruction@,System.Span{Echo.Code.IVariable})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilInstructionFormatterAdapter">
            <summary>
            Provides a custom formatter for <see cref="T:AsmResolver.PE.DotNet.Cil.CilInstruction"/>s.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilInstructionFormatterAdapter.Format(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilParameter">
            <summary>
            Represents a parameter that is declared and can be referenced within a CIL method.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilParameter.#ctor(AsmResolver.DotNet.Collections.Parameter)">
            <summary>
            Creates a new CIL parameter.
            </summary>
            <param name="parameter">The underlying parameter</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilParameter.Parameter">
            <summary>
            Gets the underlying parameter object.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilParameter.Name">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilParameter.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilPurityClassifier">
            <summary>
            Provides an implementation for the <see cref="T:Echo.Code.IPurityClassifier`1"/> interface that determines
            whether CIL instructions are considered pure or have side effects.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilPurityClassifier.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.CilPurityClassifier"/> class.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.LocalWritePurity">
            <summary>
            Gets or sets a value indicating whether writes to local variables should be considered pure or not.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.ArrayWritePurity">
            <summary>
            Gets or sets a value indicating whether writes to arrays should be considered pure or not.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.PointerWritePurity">
            <summary>
            Gets or sets a value indicating whether writes to pointers should be considered pure or not.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.DefaultFieldAccessPurity">
            <summary>
            Gets or sets a value indicating whether field read accesses should be considered pure or not by default.  
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.DefaultFieldWritePurity">
            <summary>
            Gets or sets a value indicating whether writes to field should be considered pure or not by default.  
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.DefaultMethodAccessPurity">
            <summary>
            Gets or sets a value indicating whether method accesses (e.g. reading method pointers) should be
            considered pure or not by default.  
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.DefaultMethodCallPurity">
            <summary>
            Gets or sets a value indicating whether method calls should be considered pure or not by default.  
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.DefaultIndirectCallPurity">
            <summary>
            Gets or sets a value indicating whether indirect method calls should be considered pure or not by default.  
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.DefaultTypeAccessPurity">
            <summary>
            Gets or sets a value indicating whether type access (e.g. pushing type tokens) should be considered pure
            or not by default.  
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.KnownPureMethods">
            <summary>
            Gets a mutable collection of known methods that should be considered pure.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.KnownImpureMethods">
            <summary>
            Gets a mutable collection of known methods that should be considered impure and guaranteed have side-effects.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilPurityClassifier.IsPure(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilStateTransitioner">
            <summary>
            Provides an implementation of a state transition resolver for the CIL instruction set.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilStateTransitioner.#ctor(Echo.Platforms.AsmResolver.CilArchitecture)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.CilStateTransitioner"/> class.
            </summary>
            <param name="architecture">The CIL architecture variant to compute state transitions for.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilStateTransitioner.GetInitialState(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilStateTransitioner.GetTransitionCount(Echo.DataFlow.Emulation.SymbolicProgramState{AsmResolver.PE.DotNet.Cil.CilInstruction}@,AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilStateTransitioner.GetTransitions(Echo.DataFlow.Emulation.SymbolicProgramState{AsmResolver.PE.DotNet.Cil.CilInstruction}@,AsmResolver.PE.DotNet.Cil.CilInstruction@,System.Span{Echo.ControlFlow.Construction.Symbolic.StateTransition{AsmResolver.PE.DotNet.Cil.CilInstruction}})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilStaticSuccessorResolver">
            <summary>
            Provides an implementation of <see cref="T:Echo.ControlFlow.Construction.Static.IStaticSuccessorResolver`1"/>
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilStaticSuccessorResolver.Instance">
            <summary>
            Gets a reusable singleton instance of the static successor resolver for the CIL architecture.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilStaticSuccessorResolver.GetSuccessorsCount(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilStaticSuccessorResolver.GetSuccessors(AsmResolver.PE.DotNet.Cil.CilInstruction@,System.Span{Echo.ControlFlow.Construction.SuccessorInfo})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilVariable">
            <summary>
            Represents a variable that is declared and can be referenced within a CIL method body.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilVariable.#ctor(AsmResolver.DotNet.Code.Cil.CilLocalVariable)">
            <summary>
            Creates a new CIL variable.
            </summary>
            <param name="variable">The underlying variable object.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilVariable.Variable">
            <summary>
            Gets the underlying local variable object.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilVariable.Name">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilVariable.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.CilEmulatorException">
            <summary>
            The exception that occurs when a <see cref="T:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine"/> encounters an internal error.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilEmulatorException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.CilEmulatorException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilEmulatorException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.CilEmulatorException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="inner">The inner cause of the error.</param>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.CilThread">
            <summary>
            Represents a single execution thread in a virtualized .NET process.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilThread.Machine">
            <summary>
            Gets the parent machine the thread is running in.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilThread.CallStack">
            <summary>
            Gets the current state of the call stack.
            </summary>
            <remarks>
            The call stack is also addressable from <see cref="N:Echo.Memory"/>.
            </remarks>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilThread.IsAlive">
            <summary>
            Gets a value indicating whether the thread is alive and present in the parent machine.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.Run">
            <summary>
            Runs the virtual machine until it halts.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.Run(System.Threading.CancellationToken)">
            <summary>
            Runs the virtual machine until it halts.
            </summary>
            <param name="cancellationToken">A token that can be used for canceling the emulation.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.Call(AsmResolver.DotNet.IMethodDescriptor,System.Object[])">
            <summary>
            Calls the provided method in the context of the virtual machine.
            </summary>
            <param name="method">The method to call.</param>
            <param name="arguments">The arguments.</param>
            <returns>The return value, or <c>null</c> if the provided method does not return a value.</returns>
            <remarks>
            This method is blocking until the emulation of the call completes.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.Call(AsmResolver.DotNet.IMethodDescriptor,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Calls the provided method in the context of the virtual machine.
            </summary>
            <param name="method">The method to call.</param>
            <param name="cancellationToken">A token that can be used for canceling the emulation.</param>
            <param name="arguments">The arguments.</param>
            <returns>The return value, or <c>null</c> if the provided method does not return a value.</returns>
            <remarks>
            This method is blocking until the emulation of the call completes.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.Call(AsmResolver.DotNet.IMethodDescriptor,Echo.Memory.BitVector[])">
            <summary>
            Calls the provided method in the context of the virtual machine.
            </summary>
            <param name="method">The method to call.</param>
            <param name="arguments">The arguments.</param>
            <returns>The return value, or <c>null</c> if the provided method does not return a value.</returns>
            <remarks>
            This method is blocking until the emulation of the call completes.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.Call(AsmResolver.DotNet.IMethodDescriptor,System.Threading.CancellationToken,Echo.Memory.BitVector[])">
            <summary>
            Calls the provided method in the context of the virtual machine.
            </summary>
            <param name="method">The method to call.</param>
            <param name="cancellationToken">A token that can be used for canceling the emulation.</param>
            <param name="arguments">The arguments.</param>
            <returns>The return value, or <c>null</c> if the provided method does not return a value.</returns>
            <remarks>
            This method is blocking until the emulation of the call completes or the emulation is canceled.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.StepWhile(System.Threading.CancellationToken,System.Predicate{Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext})">
            <summary>
            Continues execution of the virtual machine while the provided predicate returns <c>true</c>.
            </summary>
            <param name="cancellationToken">A token that can be used for canceling the emulation.</param>
            <param name="condition">
            A predicate that is evaluated on every step of the emulation, determining whether execution should continue.
            </param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.StepOver">
            <summary>
            Performs a single step in the virtual machine. If the current instruction performs a call, the emulation
            is treated as a single instruction.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.StepOver(System.Threading.CancellationToken)">
            <summary>
            Performs a single step in the virtual machine. If the current instruction performs a call, the emulation
            is treated as a single instruction.
            </summary>
            <param name="cancellationToken">A token that can be used for canceling the emulation.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.StepOut">
            <summary>
            Continues execution of the virtual machine until the current call frame is popped from the stack. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.StepOut(System.Threading.CancellationToken)">
            <summary>
            Continues execution of the virtual machine until the current call frame is popped from the stack. 
            </summary>
            <param name="cancellationToken">A token that can be used for canceling the emulation.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.Step">
            <summary>
            Performs a single step in the virtual machine.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilThread.Step(System.Threading.CancellationToken)">
            <summary>
            Performs a single step in the virtual machine.
            </summary>
            <param name="cancellationToken">A token that can be used for canceling the emulation.</param>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine">
            <summary>
            Represents a machine that executes CIL instructions in a virtual environment. 
            </summary>
        </member>
        <member name="E:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.ThreadCreated">
            <summary>
            Fires when a new thread was created.
            </summary>
        </member>
        <member name="E:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.ThreadDestroyed">
            <summary>
            Fires when a thread was destroyed.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.#ctor(AsmResolver.DotNet.ModuleDefinition,System.Boolean)">
            <summary>
            Creates a new CIL virtual machine.
            </summary>
            <param name="contextModule">The main module to base the context on.</param>
            <param name="is32Bit">Indicates whether the virtual machine runs in 32-bit mode or 64-bit mode.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Is32Bit">
            <summary>
            Gets a value indicating whether the environment is a 32-bit or 64-bit system.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Memory">
            <summary>
            Gets the main memory interface of the virtual machine.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Heap">
            <summary>
            Gets the heap used for storing managed objects. 
            </summary>
            <remarks>
            The heap is also addressable from <see cref="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Memory"/>.
            </remarks>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.StaticFields">
            <summary>
            Gets the memory chunk responsible for storing static fields.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.ObjectMapMemory">
            <summary>
            Gets the memory manager that embeds managed objects into virtual memory.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.ValueFactory">
            <summary>
            Gets the service that is responsible for managing types in the virtual machine.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.ContextModule">
            <summary>
            Gets the main module the emulator is executing instructions for.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Loader">
            <summary>
            Gets the service that is responsible for mapping executable files in memory.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Dispatcher">
            <summary>
            Gets the service that is responsible for dispatching individual instructions to their respective handlers.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Allocator">
            <summary>
            Gets the service that is responsible for allocating new objects.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Invoker">
            <summary>
            Gets the service that is responsible for invoking external functions or methods.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.TypeManager">
            <summary>
            Gets the service that is responsible for the initialization and management of runtime types residing in
            the virtual machine.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.UnknownResolver">
            <summary>
            Gets or sets the service that is responsible for resolving unknown values on the stack in critical moments.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.ObjectMarshaller">
            <summary>
            Gets or sets the service for marshalling managed objects into bitvectors and back.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Threads">
            <summary>
            Gets a collection of threads that are currently active in the machine.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.CreateThread(System.UInt32)">
            <summary>
            Creates a new thread in the machine.
            </summary>
            <param name="stackSize">The amount of memory to allocate for the thread's stack.</param>
            <returns>The created thread.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.DestroyThread(Echo.Platforms.AsmResolver.Emulation.CilThread)">
            <summary>
            Removes a thread and its stack from the machine. 
            </summary>
            <param name="thread">The thread to remove.</param>
            <remarks>
            This does not gracefully terminate a thread. Any code that is still running will remain executing, and may
            have unwanted side-effects. Therefore, be sure to only call this method only when it is certain that no code
            is running. 
            </remarks>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.CliMarshaller">
            <summary>
            Provides a mechanism for marshalling values in and out of the evaluation stack.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CliMarshaller.#ctor(Echo.Platforms.AsmResolver.Emulation.ValueFactory)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.CliMarshaller"/> class.
            </summary>
            <param name="valueFactory">The factory that is used to create new objects with.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CliMarshaller.ToCliValue(Echo.Memory.BitVector,AsmResolver.DotNet.Signatures.TypeSignature)">
            <summary>
            Marshals the provided value to a value that can be pushed onto the stack. 
            </summary>
            <param name="value">The value to marshal.</param>
            <param name="originalType">The type to push the value as.</param>
            <returns>The marshalled stack slot.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CliMarshaller.FromCliValue(Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,AsmResolver.DotNet.Signatures.TypeSignature)">
            <summary>
            Marshals the provided stack slot back to a normal bit vector that is to be used outside of the stack.
            </summary>
            <param name="value">The stack value.</param>
            <param name="targetType">The type to marshal to.</param>
            <returns>The marshalled value.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.AddHandler">
            <summary>
            Implements a CIL instruction handler for <c>add</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.AddHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.AddHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.AddHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.AndHandler">
            <summary>
            Implements a CIL instruction handler for <c>and</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.AndHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.AndHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.AndHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.BinaryOperatorHandlerBase">
            <summary>
            Provides a base for binary operator instruction handlers.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.BinaryOperatorHandlerBase.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.BinaryOperatorHandlerBase.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Gets a value indicating whether the instruction always pushes a 32-bit value.
            </summary>
            <param name="instruction">The instruction to classify.</param>
            <returns><c>true</c> if a 32-bit value is always pushed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.BinaryOperatorHandlerBase.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Gets a value indicating whether the instruction is a signed operation or not.
            </summary>
            <param name="instruction">The instruction to classify.</param>
            <returns><c>true</c> if signed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.BinaryOperatorHandlerBase.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <summary>
            Evaluates the binary operation on two arguments. 
            </summary>
            <param name="context">The context to evaluate the instruction in.</param>
            <param name="instruction">The instruction to dispatch and evaluate.</param>
            <param name="argument1">The first argument that also receives the output.</param>
            <param name="argument2">The second argument.</param>
            <returns>A value indicating whether the dispatch was successful or caused an error.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.CeqHandler">
            <summary>
            Implements a CIL instruction handler for <c>ceq</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.CeqHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.CeqHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.CeqHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.CgtHandler">
            <summary>
            Implements a CIL instruction handler for <c>cgt</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.CgtHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.CgtHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.CgtHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.CltHandler">
            <summary>
            Implements a CIL instruction handler for <c>clt</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.CltHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.CltHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.CltHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.DivHandler">
            <summary>
            Implements a CIL instruction handler for <c>div</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.DivHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.DivHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.DivHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.MulHandler">
            <summary>
            Implements a CIL instruction handler for <c>mul</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.MulHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.MulHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.MulHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.NegHandler">
            <summary>
            Implements a CIL instruction handler for <c>neg</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.NegHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.NotHandler">
            <summary>
            Implements a CIL instruction handler for <c>not</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.NotHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.OrHandler">
            <summary>
            Implements a CIL instruction handler for <c>pr</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.OrHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.OrHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.OrHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.RemHandler">
            <summary>
            Implements a CIL instruction handler for <c>rem</c> operations and it derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.RemHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.RemHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.RemHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.ShlHandler">
            <summary>
            Implements a CIL instruction handler for <c>shl</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.ShlHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.ShlHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.ShlHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.ShrHandler">
            <summary>
            Implements a CIL instruction handler for <c>shr</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.ShrHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.ShrHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.ShrHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.SubHandler">
            <summary>
            Implements a CIL instruction handler for <c>sub</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.SubHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.SubHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.SubHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.UnaryOperatorHandlerBase">
            <summary>
            Provides a base for unary operator instruction handlers.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.UnaryOperatorHandlerBase.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.UnaryOperatorHandlerBase.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <summary>
            Evaluates the unary operation on an argument.
            </summary>
            <param name="context">The context to evaluate the instruction in.</param>
            <param name="instruction">The instruction to dispatch and evaluate.</param>
            <param name="argument">The argument that also receives the output.</param>
            <returns>A value indicating whether the dispatch was successful or caused an error.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.XorHandler">
            <summary>
            Implements a CIL instruction handler for <c>xpr</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.XorHandler.Force32BitResult(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.XorHandler.IsSignedOperation(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arithmetic.XorHandler.Evaluate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElemaHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldelema</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElemaHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElemHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldelem</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElemHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdLenHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldlen</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdLenHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.NewArrHandler">
            <summary>
            Implements a CIL instruction handler for <c>newarr</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.NewArrHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.StElemHandler">
            <summary>
            Implements a CIL instruction handler for <c>stelem</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.StElemHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher">
            <summary>
            Provides a mechanism for dispatching instructions to their respective handlers.
            </summary>
        </member>
        <member name="E:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.BeforeInstructionDispatch">
            <summary>
            Fires before an instruction gets dispatched.
            </summary>
        </member>
        <member name="E:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.AfterInstructionDispatch">
            <summary>
            Fires after an instruction gets dispatched.
            </summary> 
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.DispatcherTable">
            <summary>
            Gets the table that is used for dispatching instructions by their mnemonic. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Dispatches and evaluates a single instruction.
            </summary>
            <param name="context">The context to evaluate the instruction in.</param>
            <param name="instruction">The instruction to dispatch and evaluate.</param>
            <returns>A value indicating whether the dispatch was successful or caused an error.</returns>
            <exception cref="T:System.NotSupportedException">Occurs when an operation was not supported by the dispatcher.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.OnBeforeInstructionDispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchEventArgs)">
            <summary>
            Fires the <see cref="E:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.BeforeInstructionDispatch" /> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.OnAfterInstructionDispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchEventArgs)">
            <summary>
            Fires the <see cref="E:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.AfterInstructionDispatch" /> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchEventArgs">
            <summary>
            Provides arguments for CIL instruction dispatch events. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchEventArgs.Context">
            <summary>
            Gets the context that the instruction is evaluated in.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchEventArgs.Instruction">
            <summary>
            Gets the instruction that is being dispatched.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchEventArgs.IsHandled">
            <summary>
            Gets or sets a value indicating whether the instruction was handled or not.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchEventArgs.Result">
            <summary>
            Gest or sets the dispatch result.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult">
            <summary>
            Provides information about the result of an instruction dispatch.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.IsSuccess">
            <summary>
            Gets a value indicating whether the dispatch and evaluation of the instruction was successful. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.ExceptionObject">
            <summary>
            When <see cref="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.IsSuccess"/> is <c>false</c>, gets the o that represents the pointer to the exception
            that was thrown during the evaluation of the instruction.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.Success">
            <summary>
            Creates a new dispatch result indicating the dispatch was successful.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.Exception(Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <summary>
            Creates a new dispatch result indicating the dispatch failed with an exception.
            </summary>
            <param name="exceptionObject">The handle to the exception object that was thrown.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.Exception(Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine,AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Creates a new dispatch result indicating the dispatch failed with an exception.
            </summary>
            <param name="machine">The machine to allocate the exception in.</param>
            <param name="type">The type of exception to allocate.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.InvalidProgram(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext)">
            <summary>
            Creates a new dispatch result indicating the dispatch failed due to an invalid program.
            </summary>
            <param name="context">The context the instruction was evaluated in.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.NullReference(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext)">
            <summary>
            Creates a new dispatch result indicating the dispatch failed due to a null reference.
            </summary>
            <param name="context">The context the instruction was evaluated in.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.IndexOutOfRange(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext)">
            <summary>
            Creates a new dispatch result indicating the dispatch failed due to an index being out of range.
            </summary>
            <param name="context">The context the instruction was evaluated in.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.StackOverflow(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext)">
            <summary>
            Creates a new dispatch result indicating the dispatch failed due to a stack overflow.
            </summary>
            <param name="context">The context the instruction was evaluated in.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.Overflow(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext)">
            <summary>
            Creates a new dispatch result indicating the dispatch failed due to an integer overflow.
            </summary>
            <param name="context">The context the instruction was evaluated in.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.InvalidCast(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.Signatures.TypeSignature,AsmResolver.DotNet.Signatures.TypeSignature)">
            <summary>
            Creates a new dispatch result indicating the dispatch failed due to a stack overflow.
            </summary>
            <param name="context">The context the instruction was evaluated in.</param>
            <param name="originalType">The original object type.</param>
            <param name="targetType">The type that the object was attempted to be casted to.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.Equals(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext">
            <summary>
            Provides a context for evaluating CIL instructions.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext.#ctor(Echo.Platforms.AsmResolver.Emulation.CilThread,System.Threading.CancellationToken)">
            <summary>
            Creates a new execution context for CIL instructions.
            </summary>
            <param name="thread">The parent thread the instruction is executed on.</param>
            <param name="cancellationToken">A token used for canceling the emulation.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext.Thread">
            <summary>
            Gets the parent thread the instruction is executed on.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext.Machine">
            <summary>
            Gets the parent machine the instruction is executed on.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext.CurrentFrame">
            <summary>
            Gets the current active stack frame.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext.CancellationToken">
            <summary>
            Gets a token used for canceling the emulation.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcI4Handler">
            <summary>
            Implements a CIL instruction handler for <c>ldc.i4</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcI4Handler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcI8Handler">
            <summary>
            Implements a CIL instruction handler for <c>ldc.i8</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcI8Handler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcR4Handler">
            <summary>
            Implements a CIL instruction handler for <c>ldc.r4</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcR4Handler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcR8Handler">
            <summary>
            Implements a CIL instruction handler for <c>ldc.r8</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcR8Handler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdNullHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldnull</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdNullHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdStrHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldstr</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdStrHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BeqHandler">
            <summary>
            Implements a CIL instruction handler for <c>beq</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BeqHandler.IsSignedCondition(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BeqHandler.EvaluateCondition(AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BgeHandler">
            <summary>
            Implements a CIL instruction handler for <c>bge</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BgeHandler.IsSignedCondition(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BgeHandler.EvaluateCondition(AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BgtHandler">
            <summary>
            Implements a CIL instruction handler for <c>bgt</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BgtHandler.IsSignedCondition(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BgtHandler.EvaluateCondition(AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BinaryBranchHandlerBase">
            <summary>
            Provides a base for branch instructions that evaluate a condition using a binary operator.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BinaryBranchHandlerBase.EvaluateCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BinaryBranchHandlerBase.IsSignedCondition(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Gets a value indicating whether the instruction is a signed operation or not.
            </summary>
            <param name="instruction">The instruction to classify.</param>
            <returns><c>true</c> if signed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BinaryBranchHandlerBase.EvaluateCondition(AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <summary>
            Evaluates the binary condition on the provided stack arguments.
            </summary>
            <param name="instruction">The instruction containing the operator to evaluate.</param>
            <param name="argument1">The left hand side of the binary operator.</param>
            <param name="argument2">The right hand side of the binary operator.</param>
            <returns>The result of the evaluation, or <c>null</c> if the evaluation failed due to an invalid program.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BleHandler">
            <summary>
            Implements a CIL instruction handler for <c>ble</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BleHandler.IsSignedCondition(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BleHandler.EvaluateCondition(AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BltHandler">
            <summary>
            Implements a CIL instruction handler for <c>blt</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BltHandler.IsSignedCondition(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BltHandler.EvaluateCondition(AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BneUnHandler">
            <summary>
            Implements a CIL instruction handler for <c>bne.un</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BneUnHandler.IsSignedCondition(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BneUnHandler.EvaluateCondition(AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BranchHandlerBase">
            <summary>
            Provides a base for branching instruction handlers.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BranchHandlerBase.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BranchHandlerBase.EvaluateCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Evaluates the condition for the branching instruction.
            </summary>
            <param name="context">The context to evaluate the instruction in.</param>
            <param name="instruction">The instruction to dispatch and evaluate.</param>
            <returns><c>true</c> if the branch should be taken, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BrFalseHandler">
            <summary>
            Implements a CIL instruction handler for <c>brfalse</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BrFalseHandler.EvaluateCondition(Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BrHandler">
            <summary>
            Implements a CIL instruction handler for <c>br</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BrHandler.EvaluateCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BrTrueHandler">
            <summary>
            Implements a CIL instruction handler for <c>brtrue</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BrTrueHandler.EvaluateCondition(Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.RetHandler">
            <summary>
            Implements a CIL instruction handler for <c>ret</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.RetHandler.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.SwitchHandler">
            <summary>
            Implements a CIL instruction handler for <c>switch</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.SwitchHandler.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.UnaryBranchHandlerBase">
            <summary>
            Provides a base for branch instructions that evaluate a condition using a unary operator.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.UnaryBranchHandlerBase.EvaluateCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.UnaryBranchHandlerBase.EvaluateCondition(Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <summary>
            Evaluates the unary condition on the provided stack slot.
            </summary>
            <param name="argument">The stack slot.</param>
            <returns>The result of the evaluation, or <c>null</c> if the evaluation failed due to an invalid program.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.DispatcherTableEntryAttribute">
            <summary>
            Marks the class as a default operation code handler for a <see cref="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher"/>. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.DispatcherTableEntryAttribute.#ctor(AsmResolver.PE.DotNet.Cil.CilCode[])">
            <summary>
            Marks the class as a default handler for a <see cref="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher"/> for the provided operation codes.
            </summary>
            <param name="opCodes">The opcodes the class handles.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.DispatcherTableEntryAttribute.OpCodes">
            <summary>
            Gets a collection of opcodes this class handles.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Exceptions.EndFilterHandler">
            <summary>
            Implements a CIL instruction handler for <c>endfilter</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Exceptions.EndFilterHandler.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Exceptions.EndFinallyHandler">
            <summary>
            Implements a CIL instruction handler for <c>endfinally</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Exceptions.EndFinallyHandler.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Exceptions.LeaveHandler">
            <summary>
            Implements a CIL instruction handler for <c>leave</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Exceptions.LeaveHandler.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Exceptions.RethrowHandler">
            <summary>
            Implements a CIL instruction handler for <c>rethrow</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Exceptions.RethrowHandler.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Exceptions.ThrowHandler">
            <summary>
            Implements a CIL instruction handler for <c>throw</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Exceptions.ThrowHandler.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.FallThroughOpCodeHandler">
            <summary>
            Provides a base for instruction handlers that finalize evaluation by increasing the program counter by the
            instruction's size. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.FallThroughOpCodeHandler.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.FallThroughOpCodeHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Evaluates a CIL instruction in the provided execution context, without increasing the program counter.
            </summary>
            <param name="context">The context to evaluate the instruction in.</param>
            <param name="instruction">The instruction to dispatch and evaluate.</param>
            <returns>A value indicating whether the dispatch was successful or caused an error.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ICilOpCodeHandler">
            <summary>
            Provides members for evaluating an instruction.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ICilOpCodeHandler.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Evaluates a CIL instruction in the provided execution context.
            </summary>
            <param name="context">The context to evaluate the instruction in.</param>
            <param name="instruction">The instruction to dispatch and evaluate.</param>
            <returns>A value indicating whether the dispatch was successful or caused an error.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Misc.ConvHandler">
            <summary>
            Implements a CIL instruction handler for conversion operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Misc.ConvHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Misc.DupHandler">
            <summary>
            Implements a CIL instruction handler for <c>dup</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Misc.DupHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Misc.NopHandler">
            <summary>
            Implements a CIL instruction handler for <c>nop</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Misc.NopHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Misc.PopHandler">
            <summary>
            Implements a CIL instruction handler for <c>pop</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Misc.PopHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.BoxHandler">
            <summary>
            Implements a CIL instruction handler for <c>box</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.BoxHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallHandler">
            <summary>
            Implements a CIL instruction handler for <c>call</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallHandler.DevirtualizeMethodInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallHandlerBase">
            <summary>
            Provides a base implementation for operation codes that call functions or methods.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallHandlerBase.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallHandlerBase.ShouldPopInstanceObject(AsmResolver.DotNet.IMethodDescriptor)">
            <summary>
            Determines whether the instance object should be popped from the stack for the provided method.
            </summary>
            <param name="method">The method to test.</param>
            <returns><c>true</c> if the instance object should be popped, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallHandlerBase.HandleCall(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <summary>
            Handles the actual calling mechanism of the instruction.
            </summary>
            <param name="context">The context to evaluate the instruction in.</param>
            <param name="instruction">The instruction to dispatch and evaluate.</param>
            <param name="method">The method that is called.</param>
            <param name="arguments">The arguments to call the method with.</param>
            <returns>The dispatching result.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallHandlerBase.GetArguments(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor)">
            <summary>
            Pops the required arguments for a method call from the stack.
            </summary>
            <param name="context">The context to evaluate the method call in.</param>
            <param name="method">The method to pop arguments for.</param>
            <returns>The list of marshalled arguments.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallHandlerBase.DevirtualizeMethodInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <summary>
            Devirtualizes and resolves the method that is referenced by the provided instruction.
            </summary>
            <param name="context">The execution context the instruction is evaluated in.</param>
            <param name="method">The method that is being devirtualized.</param>
            <param name="arguments">The arguments pushed onto the stack.</param>
            <returns>The result of the devirtualization.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallVirtHandler">
            <summary>
            Implements a CIL instruction handler for <c>callvirt</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallVirtHandler.DevirtualizeMethodInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CastClassHandler">
            <summary>
            Implements a CIL instruction handler for <c>castclass</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CastClassHandler.HandleSuccessfulCast(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,Echo.Platforms.AsmResolver.Emulation.ObjectHandle,AsmResolver.DotNet.Signatures.TypeSignature)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CastOpCodeHandlerBase">
            <summary>
            Provides a base for instructions implementing type-casting and boxing behavior.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CastOpCodeHandlerBase.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CastOpCodeHandlerBase.HandleNull(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.Signatures.TypeSignature)">
            <summary>
            Handles the case when the pushed value is <c>null</c>.
            </summary>
            <param name="context">The context to evaluate the instruction in.</param>
            <param name="targetType">The type to convert the null reference to.</param>
            <returns>The final dispatcher result.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CastOpCodeHandlerBase.HandleFailedCast(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.Signatures.TypeSignature,AsmResolver.DotNet.Signatures.TypeSignature)">
            <summary>
            Handles the case when the pushed value is incompatible with the type specified in the instruction.
            </summary>
            <param name="context">The context to evaluate the instruction in.</param>
            <param name="originalType">The type of the pushed object.</param>
            <param name="targetType">The type that the object was attempted to be converted to.</param>
            <returns>The final dispatcher result.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CastOpCodeHandlerBase.HandleSuccessfulCast(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,Echo.Platforms.AsmResolver.Emulation.ObjectHandle,AsmResolver.DotNet.Signatures.TypeSignature)">
            <summary>
            Handles the case when the pushed value is compatible with the type specified in the instruction.
            </summary>
            <param name="context">The context to evaluate the instruction in.</param>
            <param name="handle">The address of the object.</param>
            <param name="targetType">The type to convert the object to to.</param>
            <returns>The final dispatcher result.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.ConstrainedHandler">
            <summary>
            Implements a CIL instruction handler for <c>constrained</c> prefix operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.ConstrainedHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.FieldOpCodeHandler">
            <summary>
            Represents a handler that handles opcodes related to field access.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.FieldOpCodeHandler.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.FieldOpCodeHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Handles the actual operation on the field.
            </summary>
            <param name="context">The context to evaluate the instruction in.</param>
            <param name="instruction">The instruction to dispatch and evaluate.</param>
            <param name="field">The field to perform the operation on.</param>
            <returns>The dispatching result.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.IsInstHandler">
            <summary>
            Implements a CIL instruction handler for <c>isinst</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.IsInstHandler.HandleFailedCast(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.Signatures.TypeSignature,AsmResolver.DotNet.Signatures.TypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.IsInstHandler.HandleSuccessfulCast(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,Echo.Platforms.AsmResolver.Emulation.ObjectHandle,AsmResolver.DotNet.Signatures.TypeSignature)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdFldaHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldflda</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdFldaHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,AsmResolver.DotNet.IFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdFldHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldfld</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdFldHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,AsmResolver.DotNet.IFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdftnHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldftn</c> instruction.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdftnHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc/>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdsFldaHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldsflda</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdsFldaHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,AsmResolver.DotNet.IFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdsFldHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldsfld</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdsFldHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,AsmResolver.DotNet.IFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdTokenHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldtoken</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdTokenHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult">
            <summary>
            Provides information about the result of a method devirtualization process.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.ResultingMethod">
            <summary>
            When successful, gets the resulting devirtualized method.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.ExceptionObject">
            <summary>
            When unsuccessful, gets the exception thrown during the devirtualization process. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.IsSuccess">
            <summary>
            Gets a value indicating whether the devirtualization process of the referenced method was successful.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.IsUnknown">
            <summary>
            Gets a value indicating whether the devirtualization process could not be completed due to an unknown
            object that was dereferenced.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.Success(AsmResolver.DotNet.IMethodDescriptor)">
            <summary>
            Creates a new successful method devirtualization result. 
            </summary>
            <param name="method">The resolved method.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.Exception(Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <summary>
            Creates a new unsuccessful method devirtualization result.
            </summary>
            <param name="exceptionObject">
            The handle to the exception that occurred during the method devirtualization.
            </param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.Unknown">
            <summary>
            Creates a new unknown method devirtualization result.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.NewObjHandler">
            <summary>
            Implements a CIL instruction handler for <c>newobj</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.NewObjHandler.Dispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.NewObjHandler.ShouldPopInstanceObject(AsmResolver.DotNet.IMethodDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.NewObjHandler.DevirtualizeMethodInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.SizeOfHandler">
            <summary>
            Implements a CIL instruction handler for <c>sizeof</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.SizeOfHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.StFldHandler">
            <summary>
            Implements a CIL instruction handler for <c>stfld</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.StFldHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,AsmResolver.DotNet.IFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.StsFldHandler">
            <summary>
            Implements a CIL instruction handler for <c>stsfld</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.StsFldHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,AsmResolver.DotNet.IFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.UnboxAnyHandler">
            <summary>
            Implements a CIL instruction handler for <c>unbox.any</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.UnboxAnyHandler.HandleNull(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.Signatures.TypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.UnboxAnyHandler.GetReturnValue(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,Echo.Platforms.AsmResolver.Emulation.ObjectHandle,AsmResolver.DotNet.Signatures.TypeSignature)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.UnboxHandler">
            <summary>
            Implements a CIL instruction handler for <c>unbox</c> operations.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.UnboxHandler.HandleNull(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.Signatures.TypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.UnboxHandler.GetReturnValue(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,Echo.Platforms.AsmResolver.Emulation.ObjectHandle,AsmResolver.DotNet.Signatures.TypeSignature)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.UnboxHandlerBase">
            <summary>
            Provides a base for instructions implementing unboxing behavior.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.UnboxHandlerBase.HandleSuccessfulCast(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,Echo.Platforms.AsmResolver.Emulation.ObjectHandle,AsmResolver.DotNet.Signatures.TypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.UnboxHandlerBase.GetReturnValue(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,Echo.Platforms.AsmResolver.Emulation.ObjectHandle,AsmResolver.DotNet.Signatures.TypeSignature)">
            <summary>
            Transforms the resolved data address into a value to be pushed onto the stack.
            </summary>
            <param name="context">The context in which the instruction is emulated in.</param>
            <param name="handle">The address.</param>
            <param name="targetType">The data type of the value at the address.</param>
            <returns>The return value.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.CpBlkHandler">
            <summary>
            Implements a CIL instruction handler for <c>cpblk</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.CpBlkHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.CpObjHandler">
            <summary>
            Implements a CIL instruction handler for <c>cpobj</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.CpObjHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.InitBlkHandler">
            <summary>
            Implements a CIL instruction handler for <c>initblk</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.InitBlkHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.InitObjHandler">
            <summary>
            Implements a CIL instruction handler for <c>initobj</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.InitObjHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.LdIndHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldind</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.LdIndHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.LocAllocHandler">
            <summary>
            Implements a CIL instruction handler for <c>localloc</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.LocAllocHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.StIndHandler">
            <summary>
            Implements a CIL instruction handler for <c>stind</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.StIndHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.UnalignedHandler">
            <summary>
            Implements a CIL instruction handler for <c>unaligned</c> prefix instructions.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.UnalignedHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.VolatileHandler">
            <summary>
            Implements a CIL instruction handler for <c>volatile</c> prefix instructions.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.VolatileHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdArgaHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldarga</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdArgaHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdArgHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldarg</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdArgHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdLocaHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldloca</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdLocaHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdLocHandler">
            <summary>
            Implements a CIL instruction handler for <c>ldloc</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdLocHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.StArgHandler">
            <summary>
            Implements a CIL instruction handler for <c>starg</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.StArgHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.StLocHandler">
            <summary>
            Implements a CIL instruction handler for <c>stloc</c> operations and its derivatives.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.StLocHandler.DispatchInternal(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions">
            <summary>
            Provides methods for manipulating bit vectors that represent managed objects. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.AsObjectHandle(Echo.Memory.BitVector,Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine)">
            <summary>
            Interprets a bit vector as a reference to an object.
            </summary>
            <param name="objectPointer">The bit vector containing the reference.</param>
            <param name="machine">The machine the address is valid in.</param>
            <returns>The object handle.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the bit vector does not contain a fully known address.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.AsObjectHandle(Echo.Memory.BitVectorSpan,Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine)">
            <summary>
            Interprets a bit vector as a reference to an object.
            </summary>
            <param name="objectPointer">The bit vector containing the reference.</param>
            <param name="machine">The machine the address is valid in.</param>
            <returns>The object handle.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the bit vector does not contain a fully known address.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.AsObjectHandle(System.Int64,Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine)">
            <summary>
            Interprets an integer as a reference to an object.
            </summary>
            <param name="objectPointer">The integer containing the reference.</param>
            <param name="machine">The machine the address is valid in.</param>
            <returns>The object handle.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.AsStructHandle(Echo.Memory.BitVector,Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine)">
            <summary>
            Interprets a bit vector as a reference to a structure.
            </summary>
            <param name="objectPointer">The integer containing the reference.</param>
            <param name="machine">The machine the address is valid in.</param>
            <returns>The structure handle.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the bit vector does not contain a fully known address.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.AsStructHandle(Echo.Memory.BitVectorSpan,Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine)">
            <summary>
            Interprets a bit vector as a reference to a structure.
            </summary>
            <param name="objectPointer">The integer containing the reference.</param>
            <param name="machine">The machine the address is valid in.</param>
            <returns>The structure handle.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the bit vector does not contain a fully known address.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.AsStructHandle(System.Int64,Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine)">
            <summary>
            Interprets an integer as a reference to a structure.
            </summary>
            <param name="objectPointer">The integer containing the reference.</param>
            <param name="machine">The machine the address is valid in.</param>
            <returns>The structure handle.</returns>=
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.SliceObjectMethodTable(Echo.Memory.BitVectorSpan,Echo.Platforms.AsmResolver.Emulation.ValueFactory)">
            <summary>
            Interprets the bit vector as the contents of a managed object, and carves out the object's method table
            pointer.
            </summary>
            <param name="span">The bit vector representing the entire managed object.</param>
            <param name="factory">The object responsible for managing type layouts.</param>
            <returns>The slice that contains the pointer to the object's method table.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.SliceObjectData(Echo.Memory.BitVectorSpan,Echo.Platforms.AsmResolver.Emulation.ValueFactory)">
            <summary>
            Interprets the bit vector as the contents of a managed object, and carves out the actual object data.
            </summary>
            <param name="span">The bit vector representing the entire managed object.</param>
            <param name="factory">The object responsible for managing type layouts.</param>
            <returns>The slice that contains just the object data.</returns>
            <remarks>
            This method effectively strips away the header of an object.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.SliceObjectField(Echo.Memory.BitVectorSpan,Echo.Platforms.AsmResolver.Emulation.ValueFactory,AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Interprets the bit vector as object data (including the object header), and carves out a single field from it.
            </summary>
            <param name="span">The bit vector representing the entire object.</param>
            <param name="factory">The object responsible for managing type layouts.</param>
            <param name="field">The field to carve out.</param>
            <returns>The slice that contains the raw data of the field.</returns>
            <exception cref="T:System.ArgumentException">
            Occurs when the provided field has no valid declaring type or could not be resolved.
            </exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.SliceArrayLength(Echo.Memory.BitVectorSpan,Echo.Platforms.AsmResolver.Emulation.ValueFactory)">
            <summary>
            Interprets the bit vector as the contents of a managed array, and carves out the length field.
            </summary>
            <param name="span">The bit vector representing the entire managed array.</param>
            <param name="factory">The object responsible for managing type layouts.</param>
            <returns>The slice that contains the length of the array.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.SliceArrayData(Echo.Memory.BitVectorSpan,Echo.Platforms.AsmResolver.Emulation.ValueFactory)">
            <summary>
            Interprets the bit vector as the contents of a managed array, and carves out the raw data of all elements.
            </summary>
            <param name="span">The bit vector representing the entire managed array.</param>
            <param name="factory">The object responsible for managing type layouts.</param>
            <returns>The slice that contains the raw data of the elements of the array.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.SliceArrayElement(Echo.Memory.BitVectorSpan,Echo.Platforms.AsmResolver.Emulation.ValueFactory,AsmResolver.DotNet.Signatures.TypeSignature,System.Int32)">
            <summary>
            Interprets the bit vector as the contents of a managed array, and carves out a single element.
            </summary>
            <param name="span">The bit vector representing the entire managed array.</param>
            <param name="factory">The object responsible for managing type layouts.</param>
            <param name="elementType">The type of elements stored in the array.</param>
            <param name="index">The index of the element to carve out.</param>
            <returns>The slice that contains the raw data of the requested element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.SliceStringLength(Echo.Memory.BitVectorSpan,Echo.Platforms.AsmResolver.Emulation.ValueFactory)">
            <summary>
            Interprets the bit vector as a string object, and carves out the length field.
            </summary>
            <param name="span">The bit vector representing the entire managed string object.</param>
            <param name="factory">The object responsible for managing type layouts.</param>
            <returns>The slice that contains the length of the string.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.SliceStringData(Echo.Memory.BitVectorSpan,Echo.Platforms.AsmResolver.Emulation.ValueFactory)">
            <summary>
            Interprets the bit vector as a string object, and carves out the characters of the string.
            </summary>
            <param name="span">The bit vector representing the entire managed string object.</param>
            <param name="factory">The object responsible for managing type layouts.</param>
            <returns>The slice that contains the raw characters of the string.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.SliceStructField(Echo.Memory.BitVectorSpan,Echo.Platforms.AsmResolver.Emulation.ValueFactory,AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Interprets the bit vector as a structure, and carves out a single field from it.
            </summary>
            <param name="span">The bit vector representing the entire structure.</param>
            <param name="factory">The object responsible for managing type layouts.</param>
            <param name="field">The field to carve out.</param>
            <returns>The slice that contains the raw data of the field.</returns>
            <remarks>
            When applying this on structures, this function can be used as is. When applying this on objects, make sure
            the input bit vector does <strong>not</strong> contain the object header. This header can be stripped away
            by using e.g. <see cref="M:Echo.Platforms.AsmResolver.Emulation.DotNetBitVectorExtensions.SliceObjectData(Echo.Memory.BitVectorSpan,Echo.Platforms.AsmResolver.Emulation.ValueFactory)"/> first.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Occurs when the provided field has no valid declaring type or could not be resolved.
            </exception>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.EmptyUnknownResolver">
            <summary>
            Provides an implementation of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.IUnknownResolver"/> that reports back to the emulator that
            it should treat every unknown pointer or array access as an operation that is successful.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.EmptyUnknownResolver.Instance">
            <summary>
            Gets the default instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.EmptyUnknownResolver"/> class.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.EmptyUnknownResolver.ResolveBranchCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.EmptyUnknownResolver.ResolveBranchCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.EmptyUnknownResolver.ResolveSwitchCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.EmptyUnknownResolver.ResolveSourcePointer(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.EmptyUnknownResolver.ResolveDestinationPointer(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.EmptyUnknownResolver.ResolveBlockSize(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.EmptyUnknownResolver.ResolveArrayIndex(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,System.Int64,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.EmptyUnknownResolver.ResolveMethod(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.EmptyUnknownResolver.ResolveExceptionFilter(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.EmulatedException">
            <summary>
            Describes an exception that was thrown by emulated CIL code.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.EmulatedException.#ctor(Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <summary>
            Wraps the provided virtual exception object into an <see cref="T:Echo.Platforms.AsmResolver.Emulation.EmulatedException"/> instance.
            </summary>
            <param name="exceptionObject">The handle to the virtual exception object.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.EmulatedException.ExceptionObject">
            <summary>
            Gets the handle to the virtual exception object that was thrown by the emulated CIL code.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap">
            <summary>
            Represents a heap of managed objects.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.#ctor(System.Int32,Echo.Platforms.AsmResolver.Emulation.ValueFactory)">
            <summary>
            Creates a new empty heap for managed objects.
            </summary>
            <param name="size">The maximum size the heap can grow.</param>
            <param name="factory">The object responsible for managing type information.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.#ctor(Echo.Memory.Heap.IHeap,Echo.Platforms.AsmResolver.Emulation.ValueFactory)">
            <summary>
            Creates a new empty heap for managed objects.
            </summary>
            <param name="backingHeap">The backing heap to use for allocating raw memory.</param>
            <param name="factory">The object responsible for managing type information.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.AddressRange">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.AllocateFlat(System.UInt32,System.Boolean)">
            <summary>
            Allocates flat unmanaged memory in the heap (i.e., without any object header).
            </summary>
            <param name="size">The size in bytes of the memory region to allocate.</param>
            <param name="initialize">A value indicating whether the object should be initialized with zeroes.</param>
            <returns>The address of the memory that was allocated.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.AllocateObject(AsmResolver.DotNet.ITypeDescriptor,System.Boolean)">
            <summary>
            Allocates a managed object of the provided type in the heap.
            </summary>
            <param name="type">The type of object to allocate.</param>
            <param name="initialize">A value indicating whether the object should be initialized with zeroes.</param>
            <returns>The address of the object that was allocated.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the provided type's size is unknown (e.g. when the type is an array or string type).
            </exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.AllocateSzArray(AsmResolver.DotNet.Signatures.TypeSignature,System.Int32,System.Boolean)">
            <summary>
            Allocates a single dimension, zero-based array on the heap.
            </summary>
            <param name="elementType">The type of elements the array stores.</param>
            <param name="elementCount">The number of elements in the array.</param>
            <param name="initialize">A value indicating whether the elements should be initialized with zeroes.</param>
            <returns>The address of the array that was allocated.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.AllocateString(System.String)">
            <summary>
            Allocates a string into the virtual managed heap.
            </summary>
            <param name="value">The string literal.</param> 
            <returns>The address of the string that was allocated.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.AllocateString(System.Int32,System.Boolean)">
            <summary>
            Allocates a string into the virtual managed heap.
            </summary>
            <param name="length">The number of characters in the string.</param>
            <param name="initialize">A value indicating whether all characters should be initialized with zeroes.</param>
            <returns>The address of the string that was allocated.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.AllocateString(Echo.Memory.BitVector)">
            <summary>
            Allocates a string into the virtual managed heap.
            </summary>
            <param name="contents">The string data.</param>
            <returns>The address of the string that was allocated.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.GetInternedString(System.String)">
            <summary>
            Gets the address to an interned string in the virtual managed heap.
            </summary>
            <param name="value">The string.</param>
            <returns>The address of the interned string.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.GetObjectSize(System.Int64)">
            <summary>
            Gets the size of the object at the provided address.
            </summary>
            <param name="address">The address of the object.</param>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.GetObjectSpan(Echo.Memory.BitVectorSpan)">
            <summary>
            Gets a bit vector slice that spans the contents of the object at the provided address. 
            </summary>
            <param name="address">The address of the object.</param>
            <returns>The object slice.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.GetObjectSpan(System.Int64)">
            <summary>
            Gets a bit vector slice that spans the contents of the object at the provided address. 
            </summary>
            <param name="address">The address of the object.</param>
            <returns>The object slice.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.GetObjectRanges">
            <summary>
            Obtains a collection of address ranges of all managed objects currently in the heap.
            </summary>
            <returns>The ranges.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.Free(System.Int64)">
            <summary>
            Releases an object from the heap.
            </summary>
            <param name="address">The address of the object.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.IsValidAddress(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.Rebase(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.Read(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.Write(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ManagedObjectHeap.Write(System.Int64,System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Heap.MappedObject">
            <summary>
            Embeds a managed object into the memory of a virtual machine, providing HLE access to the object.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.MappedObject.#ctor(System.Object,AsmResolver.DotNet.Memory.TypeMemoryLayout,Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine)">
            <summary>
            Creates a new managed object embedding.
            </summary>
            <param name="o">The object to embed.</param>
            <param name="virtualLayout">The memory layout of the object.</param>
            <param name="machine">The machine the object is valid in.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Heap.MappedObject.Object">
            <summary>
            Gets the embedded object.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Heap.MappedObject.AddressRange">
            <summary>
            Gets the virtual memory layout of the object's contents.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.MappedObject.IsValidAddress(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.MappedObject.Rebase(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.MappedObject.Read(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.MappedObject.Write(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.MappedObject.Write(System.Int64,System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory">
            <summary>
            Provides a memory space for hosting managed objects within memory of a virtual machine. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory.#ctor(Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine,System.Int64)">
            <summary>
            Creates a new object mapping host memory space.
            </summary>
            <param name="machine">The machine the memory is associated with.</param>
            <param name="size">The maximum size of the memory.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory.AddressRange">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory.IsValidAddress(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory.Rebase(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory.Read(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory.Write(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory.Write(System.Int64,System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory.GetOrCreateMapping(System.Object)">
            <summary>
            Gets or creates a new address mapping for the provided object.
            </summary>
            <param name="value">The object to embed into the machine.</param>
            <returns>The mapped object.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory.TryGetObject(System.Int64,Echo.Platforms.AsmResolver.Emulation.Heap.MappedObject@)">
            <summary>
            Attempts to obtain the managed object mapping by its address.
            </summary>
            <param name="address">The address of the mapped object.</param>
            <param name="map">The obtained mapped object.</param>
            <returns><c>true</c> if the object was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory.Unmap(System.Object)">
            <summary>
            Unmaps a registered object from the host memory.
            </summary>
            <param name="value">The object to unmap.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory.Clear">
            <summary>
            Unmaps all registered objects from the host memory.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResult">
            <summary>
            Describes the result of an allocation of an object. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResult.ResultType">
            <summary>
            Gets the type of result this object contains. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResult.IsInconclusive">
            <summary>
            Gets a value indicating whether the invocation was inconclusive and not handled yet.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResult.IsSuccess">
            <summary>
            Determines whether the invocation was successful.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResult.Address">
            <summary>
            When <see cref="P:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResult.ResultType"/> is <see cref="F:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResultType.StepOver"/>, gets the address of the object
            that was allocated or constructed.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResult.ExceptionObject">
            <summary>
            When <see cref="P:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResult.ResultType"/> is <see cref="F:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResultType.Exception"/>, gets the handle to the
            exception object that was thrown.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResult.Inconclusive">
            <summary>
            Constructs a new inconclusive allocation result, where the allocation was not handled yet.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResult.Allocated(Echo.Memory.BitVector)">
            <summary>
            Constructs a new conclusive allocation result, where the object was successfully allocated but not yet
            initialized yet.
            </summary>
            <param name="address">The address of the allocated object.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResult.FullyConstructed(Echo.Memory.BitVector)">
            <summary>
            Constructs a new conclusive allocation result, where the object was successfully allocated and is also fully
            initialized by a constructor.
            </summary>
            <param name="address">The address of the allocated object.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResult.Exception(Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <summary>
            Constructs a new failed allocation result with the provided pointer to an exception object describing the
            error that occurred.
            </summary>
            <param name="exceptionObject">The handle to the exception object that was thrown.</param>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResultType">
            <summary>
            Provides members describing the different types of allocation results that can be produced during an object
            allocation in a CIL virtual machine.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResultType.Inconclusive">
            <summary>
            Indicates the allocation was not handled yet.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResultType.Allocated">
            <summary>
            Indicates the object was allocated but not initialized yet and a constructor should be called.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResultType.FullyConstructed">
            <summary>
            Indicates the object was allocated and also initialized.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Invocation.AllocationResultType.Exception">
            <summary>
            Indicates the allocation failed with an exception.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodHandler">
            <summary>
            Defines a method that is able to handle an emulated method invocation.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.CallbackMethodInvoker">
            <summary>
            Wraps a <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodHandler"/> delegate into a <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker"/>.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.CallbackMethodInvoker.#ctor(Echo.Platforms.AsmResolver.Emulation.Invocation.MethodHandler)">
            <summary>
            Wraps a <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodHandler"/> delegate into a <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker"/>.
            </summary>
            <param name="handler">The delegate to wrap.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.CallbackMethodInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultAllocators">
            <summary>
            Provides methods for constructing object allocators using a set of default allocators implementations. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultAllocators.UnknownAddress">
            <summary>
            Gets an object allocator that returns unknown addresses. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultAllocators.VirtualHeap">
            <summary>
            Gets an allocator that allocates objects in the virtualalized heap of the underlying virtual machine.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultAllocators.String">
            <summary>
            Gets an allocator that handles System.String constructors.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultAllocators.WithFallback(Echo.Platforms.AsmResolver.Emulation.Invocation.IObjectAllocator,Echo.Platforms.AsmResolver.Emulation.Invocation.IObjectAllocator)">
            <summary>
            Chains the first object allocator with the provided object allocator in such a way that if the result of the
            first allocator is inconclusive, the second allocator will be used as a fallback allocator.  
            </summary>
            <param name="self">The first object allocator</param>
            <param name="other">The fallback object allocator</param>
            <returns>The constructed allocator chain.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers">
            <summary>
            Provides methods for constructing method invokers using a set of default invoker implementations. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.StepIn">
            <summary>
            Gets the method invoker that always lets the emulator step into the requested method, effectively letting
            the emulator emulate all called methods recursively.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.ReturnUnknown">
            <summary>
            Gets the method invoker that always steps over the requested method and produces an unknown result
            according to the method's return type.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.ReturnDefault">
            <summary>
            Gets the method invoker that always steps over the requested method and produces the default result
            according to the method's return type.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.ReturnUnknownForExternal">
            <summary>
            Gets the method invoker that steps over any method that is not within the resolution scope of the current
            stack frame. That is, any method that is defined in an external assembly will be emulated as a step-over
            method with an unknown result. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.ReturnUnknownForNative">
            <summary>
            Gets the method invoker that steps over any method that does not have a CIL method body assigned by
            returning an unknown result, and otherwise leaves the invocation result inconclusive.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.ReflectionInvoke">
            <summary>
            Gets the method invoker that steps over any method by invoking it via System.Reflection. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.StringShim">
            <summary>
            Gets the default shim for the <see cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.UnsafeShim">
            <summary>
            Gets the default shim for the <see cref="T:System.Runtime.CompilerServices.Unsafe"/> class.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.DelegateShim">
            <summary>
            Gets the default shim for the <see cref="T:System.Delegate"/> class.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.RuntimeHelpersShim">
            <summary>
            Gets the default shim for the <see cref="T:System.Runtime.CompilerServices.RuntimeHelpers"/> class.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.IntrinsicsShim">
            <summary>
            Gets the default shim for methods found in the <c>System.Runtime.Intrinsics</c> namespace of the BCL. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.MemoryMarshalShim">
            <summary>
            Gets the default shim for the <see cref="T:System.Runtime.InteropServices.MemoryMarshal"/> class.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.HandleExternalWith(Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker)">
            <summary>
            Gets the method invoker that forwards any method that is not within the resolution scope of the current
            stack frame to the provided method invoker, and otherwise leaves the invocation result inconclusive.
            </summary>
            <param name="baseInvoker">The invoker to use for producing a result when stepping over a method.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.HandleNativeWith(Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker)">
            <summary>
            Gets the method invoker that forwards any method that does not have a CIL method body assigned to the
            provided method invoker, and otherwise leaves the invocation result inconclusive.
            </summary>
            <param name="baseInvoker">The invoker to use for producing a result when stepping over a method.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.CreateShim">
            <summary>
            Creates a new method shim invoker that multiplexes a set of methods to individual handlers.  
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.CreateDefaultShims">
            <summary>
            Creates a method invoker that provides default shim implementations for various base class library methods
            that are implemented by the runtime.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.DefaultInvokers.WithFallback(Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker,Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker)">
            <summary>
            Chains the first method invoker with the provided method invoker in such a way that if the result of the
            first invoker is inconclusive, the second invoker will be used as a fallback invoker.  
            </summary>
            <param name="self">The first method invoker</param>
            <param name="other">The fallback method invoker</param>
            <returns>The constructed invoker chain.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.DelegateInvoker">
            <summary>
            Wrapper for Delegates
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.DelegateInvoker.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.DelegateInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.ExternalMethodInvoker">
            <summary>
            Implements a method invoker that steps over any method that is defined outside of the current method's
            resolution scope.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.ExternalMethodInvoker.#ctor(Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker,AsmResolver.DotNet.Signatures.SignatureComparer)">
            <summary>
            Creates a new step-over external method invoker.
            </summary>
            <param name="baseInvoker">The invoker to use when stepping over.</param>
            <param name="comparer"></param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.ExternalMethodInvoker.BaseInvoker">
            <summary>
            Gets the invoker that is used when invoking an external method.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.ExternalMethodInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker">
            <summary>
            Provides members for emulating invocations of external methods.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <summary>
            Invokes or emulates an external method.
            </summary>
            <param name="context">The execution context the call originates from.</param>
            <param name="method">The method to invoke.</param>
            <param name="arguments">The arguments to invoke the method with.</param>
            <returns>The result</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.IntrinsicsInvoker">
            <summary>
            Implements a method invoker that shims methods in the <c>System.Runtime.Intrinsics</c> namespace.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.IntrinsicsInvoker.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.IntrinsicsInvoker"/> class.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.IntrinsicsInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult">
            <summary>
            Describes the result of an invocation of an external method. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult.ResultType">
            <summary>
            Gets the type of result this object contains. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult.IsInconclusive">
            <summary>
            Gets a value indicating whether the invocation was inconclusive and not handled yet.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult.IsSuccess">
            <summary>
            Determines whether the invocation was successful.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult.Value">
            <summary>
            When <see cref="P:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult.ResultType"/> is <see cref="F:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResultType.StepOver"/>, gets the value that the
            method returned (if available).
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult.ExceptionObject">
            <summary>
            When <see cref="P:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult.ResultType"/> is <see cref="F:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResultType.Exception"/>, gets the handle to the
            exception object that was thrown.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult.Inconclusive">
            <summary>
            Constructs a new inconclusive invocation result, where the invocation was not handled yet.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult.StepIn">
            <summary>
            Constructs a new conclusive invocation result, where the invocation was handled as a step-in action.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult.StepOver(Echo.Memory.BitVector)">
            <summary>
            Constructs a new conclusive invocation result, where the invocation was fully handled by the invoker and
            a result was produced.
            </summary>
            <param name="value">
            The result that was produced by the method, or <c>null</c> if the method does not return a value.
            </param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult.FullyHandled">
            <summary>
            Constructs a new conclusive invocation result, where the invocation was fully emulated by the invoker.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResult.Exception(Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <summary>
            Constructs a new failed invocation result with the provided pointer to an exception object describing the
            error that occurred.
            </summary>
            <param name="exceptionObject">The handle to the exception object that was thrown.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResultType">
            <summary>
            Provides members describing the different types of invocation results that can be produced during a method
            invocation in a CIL virtual machine.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResultType.Inconclusive">
            <summary>
            Indicates the invocation was not handled yet.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResultType.StepIn">
            <summary>
            Indicates the invocation is handled as a step-in action.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResultType.StepOver">
            <summary>
            Indicates the invocation is handled fully by the invoker.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResultType.FullyHandled">
            <summary>
            Indicates the invocation is fully emulated by the invoker.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Invocation.InvocationResultType.Exception">
            <summary>
            Indicates the invocation resulted in an error.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.IObjectAllocator">
            <summary>
            Provides members for emulating object allocation.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.IObjectAllocator.Allocate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <summary>
            Allocates a new object with the provided constructor and arguments.
            </summary>
            <param name="context">The execution context the call originates from.</param>
            <param name="ctor">The constructor to invoke after allocation.</param>
            <param name="arguments">The arguments to invoke the constructor with.</param>
            <returns>The result</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.MemoryMarshalInvoker">
            <summary>
            Implements a method invoker that shims methods in the <see cref="T:System.Runtime.InteropServices.MemoryMarshal"/> class.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.MemoryMarshalInvoker.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.MemoryMarshalInvoker"/> class.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.MemoryMarshalInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodInvokerChain">
            <summary>
            Represents a chain of method invokers that are invoked in sequence until one of the invokers produces a
            conclusive result.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodInvokerChain.Invokers">
            <summary>
            Gets the list of invokers to be called.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodInvokerChain.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodShimInvoker">
            <summary>
            Provides an implementation that handles invocations on a per-method basis.  
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodShimInvoker.#ctor">
            <summary>
            Creates a new method shim invoker.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodShimInvoker.#ctor(AsmResolver.DotNet.Signatures.SignatureComparer)">
            <summary>
            Creates a new method shim invoker.
            </summary>
            <param name="comparer">The comparer object to use when comparing methods.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodShimInvoker.Map(AsmResolver.DotNet.IMethodDescriptor,Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker)">
            <summary>
            Assigns a method invoker to a specific method.
            </summary>
            <param name="method">The method to handle.</param>
            <param name="handler">The invoker that will handle the method.</param>
            <returns>The current method shim invoker.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodShimInvoker.Map(AsmResolver.DotNet.IMethodDescriptor,Echo.Platforms.AsmResolver.Emulation.Invocation.MethodHandler)">
            <summary>
            Assigns a method invoker to a specific method.
            </summary>
            <param name="method">The method to handle.</param>
            <param name="handler">The invoker that will handle the method.</param>
            <returns>The current method shim invoker.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodShimInvoker.MapMany(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.IMethodDescriptor},Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker)">
            <summary>
            Assigns a methods invoker to multiple methods.
            </summary>
            <param name="methods">The methods to handle.</param>
            <param name="handler">The invoker that will handle the method.</param>
            <returns>The current method shim invoker.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodShimInvoker.MapMany(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.IMethodDescriptor},Echo.Platforms.AsmResolver.Emulation.Invocation.MethodHandler)">
            <summary>
            Assigns a methods invoker to multiple methods.
            </summary>
            <param name="methods">The methods to handle.</param>
            <param name="handler">The invoker that will handle the method.</param>
            <returns>The current method shim invoker.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.MethodShimInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.NativeMethodInvoker">
            <summary>
            Implements a method invoker that steps over any method that does not have a CIL method body assigned.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.NativeMethodInvoker.#ctor(Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker)">
            <summary>
            Creates a new native method invoker.
            </summary>
            <param name="baseInvoker">The invoker that is used when invoking a non-CIL method.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.NativeMethodInvoker.BaseInvoker">
            <summary>
            Gets the invoker that is used when invoking a non-CIL method.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.NativeMethodInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.ObjectAllocatorChain">
            <summary>
            Represents a chain of object allocators that are invoked in sequence until one of the allocators produces a
            conclusive result.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.ObjectAllocatorChain.Allocators">
            <summary>
            Gets the list of invokers to be called.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.ObjectAllocatorChain.Allocate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.ReflectionInvoker">
            <summary>
            Provides an implementation of a method invoker that steps over any method by invoking it via System.Reflection. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.ReflectionInvoker.Instance">
            <summary>
            Gets the default instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.ReflectionInvoker"/> class.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.ReflectionInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.ReturnDefaultInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.RuntimeHelpersInvoker">
            <summary>
            Implements a method invoker that shims methods from the <see cref="T:System.Runtime.CompilerServices.RuntimeHelpers"/> class.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.RuntimeHelpersInvoker.Instance">
            <summary>
            Gets the singleton instance for the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.RuntimeHelpersInvoker"/> class.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.RuntimeHelpersInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.StringAllocator">
            <summary>
            Provides a shim allocator that handles System.String constructors. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.StringAllocator.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.StringAllocator"/> class.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.StringAllocator.Allocate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.StringInvoker">
            <summary>
            Implements a method invoker that shims methods from the <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.StringInvoker.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.StringInvoker"/> class.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.StringInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.UnknownAddressAllocator">
            <summary>
            Provides an implementation of an allocator that always returns unknown addresses for object allocation requests. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.UnknownAddressAllocator.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.UnknownAddressAllocator"/> class.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.UnknownAddressAllocator.Allocate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.UnsafeInvoker">
            <summary>
            Implements a method invoker that shims methods from the <see cref="T:System.Runtime.CompilerServices.Unsafe"/> class.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.UnsafeInvoker.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.UnsafeInvoker"/> class.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.UnsafeInvoker.Invoke(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.VirtualHeapAllocator">
            <summary>
            Provides an implementation of an allocator that allocates new objects in the virtualized heap of the underlying
            virtual machine. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.VirtualHeapAllocator.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.VirtualHeapAllocator"/> class.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.VirtualHeapAllocator.Allocate(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.IObjectMarshaller">
            <summary>
            Provides methods for marshalling managed objects into bit vectors and back.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.IObjectMarshaller.Machine">
            <summary>
            Gets the machine the marshaller is targeting.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.IObjectMarshaller.ToBitVector(System.Object)">
            <summary>
            Constructs a bit vector that represents the provided object.
            </summary>
            <param name="obj">The object.</param>
            <returns>The bitvector containing the address to the object.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.IObjectMarshaller.ToObject(Echo.Memory.BitVectorSpan,System.Type)">
            <summary>
            Interprets the provided bit vector as an object of the provided type.
            </summary>
            <param name="vector">The vector.</param>
            <param name="targetType">The type to marshal to.</param>
            <returns>The marshalled object.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.IUnknownResolver">
            <summary>
            Provides methods for resolving unknown values in critical points of the emulation process.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.IUnknownResolver.ResolveBranchCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <summary>
            Resolves an unknown condition value of a unary conditional branch instruction.
            </summary>
            <param name="context">The context in which the instruction is executed in.</param>
            <param name="instruction">The branch instruction that is being executed.</param>
            <param name="argument">The condition to be resolved.</param>
            <returns><c>true</c> if the branch should be taken, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.IUnknownResolver.ResolveBranchCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <summary>
            Resolves an unknown condition value of a binary conditional branch instruction.
            </summary>
            <param name="context">The context in which the instruction is executed in.</param>
            <param name="instruction">The branch instruction that is being executed.</param>
            <param name="argument1">The first argument.</param>
            <param name="argument2">The second argument.</param>
            <returns><c>true</c> if the branch should be taken, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.IUnknownResolver.ResolveSwitchCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <summary>
            Resolves an unknown index value of a switch instruction.
            </summary>
            <param name="context">The context in which the instruction is executed in.</param>
            <param name="instruction">The switch instruction that is being executed.</param>
            <param name="argument">The switch index to resolve.</param>
            <returns>The resolved index to jump to, or <c>null</c> to skip the switch instruction.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.IUnknownResolver.ResolveSourcePointer(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <summary>
            Resolves an unknown source address to a memory block or object to read data from.
            </summary>
            <param name="context">The context in which the instruction is executed in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <param name="address">The address to resolve.</param>
            <returns>The resolved address, or <c>null</c> to treat it as an unknown value that is processed successfully.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.IUnknownResolver.ResolveDestinationPointer(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <summary>
            Resolves an unknown destination address to a memory block or object to write data to.
            </summary>
            <param name="context">The context in which the instruction is executed in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <param name="address">The address to resolve.</param>
            <returns>The resolved address, or <c>null</c> to treat it as an unknown value that is processed successfully.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.IUnknownResolver.ResolveBlockSize(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <summary>
            Resolves an unknown size for a memory block.
            </summary>
            <param name="context">The context in which the instruction is executed in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <param name="size">The size to resolve.</param>
            <returns>The resolved size, or <c>null</c> to treat it as an unknown value that is processed successfully.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.IUnknownResolver.ResolveArrayIndex(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,System.Int64,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <summary>
            Resolves an unknown index of an element within an array.
            </summary>
            <param name="context">The context in which the instruction is executed in.</param>
            <param name="instruction">The switch instruction that is being executed.</param>
            <param name="arrayAddress">The address of the array.</param>
            <param name="index">The index to resolve.</param>
            <returns>The resolved index, or <c>null</c> to treat it as an unknown value that is processed successfully.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.IUnknownResolver.ResolveMethod(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <summary>
            Resolves a method devirtualization on an unknown object instance.
            </summary>
            <param name="context">The context in which the instruction is executed in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <param name="arguments"></param>
            <returns>
            The resolved method, or <c>null</c> if devirtualization should be ignored and the default implementation of
            the method should be used.
            </returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.IUnknownResolver.ResolveExceptionFilter(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <summary>
            Resolves an unknown conclusion for an exception filter.
            </summary>
            <param name="context">The context in which the instruction is executed in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <param name="conclusion">The unknown conclusion value.</param>
            <returns><c>true</c> if the exception should be handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.ObjectHandle">
            <summary>
            Represents an address to an object (including its object header) within a CIL virtual machine. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.#ctor(Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine,System.Int64)">
            <summary>
            Creates a new object handle from the provided address.
            </summary>
            <param name="machine">The machine the address is valid in.</param>
            <param name="address">The address.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.Machine">
            <summary>
            Gets the machine the object lives in.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.Address">
            <summary>
            Gets the address to the beginning of the object.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.IsNull">
            <summary>
            Gets a value indicating whether this handle represents the <c>null</c> reference.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.Contents">
            <summary>
            Gets the address to the beginning of the object's data.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.GetObjectType">
            <summary>
            Gets the object's type (or method table).
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.GetMemoryLayout">
            <summary>
            Obtains the object's data memory layout.
            </summary>
            <returns>The memory layout.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.GetFieldAddress(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Obtains the absolute address of a field within the object.
            </summary>
            <param name="field">The field to obtain the address for.</param>
            <returns>The address.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadField(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Copies the value of a field into a new bit vector.
            </summary>
            <param name="field">The field to obtain the value for.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadField(AsmResolver.DotNet.IFieldDescriptor,Echo.Memory.BitVectorSpan)">
            <summary>
            Copies the value of a field into a bit vector.
            </summary>
            <param name="field">The field to obtain the value for.</param>
            <param name="buffer">The buffer to copy the value into.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.WriteField(AsmResolver.DotNet.IFieldDescriptor,Echo.Memory.BitVectorSpan)">
            <summary>
            Copies the provided bit vector into a field of the object. 
            </summary>
            <param name="field">The field to write to.</param>
            <param name="buffer">The bits to write.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadStringLength">
            <summary>
            Interprets the handle as a string handle, and obtains the length of the contained string.
            </summary>
            <returns>The length.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadStringLength(Echo.Memory.BitVectorSpan)">
            <summary>
            Interprets the handle as a string handle, and obtains the length of the contained string.
            </summary>
            <param name="buffer">The buffer to copy the length bits into.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadStringData">
            <summary>
            Interprets the handle as a string handle, and obtains the bits that make up the characters of the string.
            </summary>
            <returns>The bit vector containing the string's characters.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the string has an unknown length.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadArrayLength">
            <summary>
            Interprets the handle as an array reference, and obtains the length of the contained array.
            </summary>
            <returns>The bits representing the length of the array.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadArrayLength(Echo.Memory.BitVectorSpan)">
            <summary>
            Interprets the handle as an array reference, and obtains the length of the contained array.
            </summary>
            <param name="buffer">The buffer to copy the length bits into.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadArrayData">
            <summary>
            Interprets the handle as an array reference, and obtains all elements of the array as one continuous buffer
            of bytes.
            </summary>
            <returns>The raw array data.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the array has an unknown length.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadArrayData(System.Int32,System.Int32)">
            <summary>
            Interprets the handle as an array reference, and obtains all elements of the array as one continuous buffer
            of bytes.
            </summary>
            <param name="startIndex">The index to start reading from.</param>
            <param name="length">The number of elements to read.</param>
            <returns>The raw array data.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the array has an unknown length.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadArrayData(Echo.Memory.BitVectorSpan)">
            <summary>
            Interprets the handle as an array reference, and obtains all elements of the array as one continuous buffer
            of bytes.
            </summary>
            <param name="buffer">The buffer to copy the array data into.</param>
            <returns>The raw array data.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadArrayData(Echo.Memory.BitVectorSpan,System.Int32)">
            <summary>
            Interprets the handle as an array reference, and obtains all elements of the array as one continuous buffer
            of bytes.
            </summary>
            <param name="buffer">The buffer to copy the array data into.</param>
            <param name="startIndex">The start index to read from.</param>
            <returns>The raw array data.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadArrayData(Echo.Memory.BitVectorSpan,System.Int32,AsmResolver.DotNet.Signatures.TypeSignature)">
            <summary>
            Interprets the handle as an array reference, and obtains all elements of the array as one continuous buffer
            of bytes.
            </summary>
            <param name="buffer">The buffer to copy the array data into.</param>
            <param name="startIndex">The start index to read from.</param>
            <param name="elementType">The element type to assume.</param>
            <returns>The raw array data.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.WriteArrayData(Echo.Memory.BitVectorSpan)">
            <summary>
            Interprets the handle as an array reference, and writes elements to the array's data as one continuous buffer
            of bytes.
            </summary>
            <param name="buffer">The buffer to copy the array data from.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.WriteArrayData(System.ReadOnlySpan{System.Byte})">
            <summary>
            Interprets the handle as an array reference, and writes elements to the array's data as one continuous buffer
            of bytes.
            </summary>
            <param name="buffer">The buffer to copy the array data from.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.GetArrayElementAddress(AsmResolver.DotNet.Signatures.TypeSignature,System.Int64)">
            <summary>
            Interprets the handle as an array reference, and obtains the address of the provided element by its index.
            </summary>
            <param name="elementType">The type of elements the array stores.</param>
            <param name="index">The index of the element.</param>
            <returns>The address of the element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadArrayElement(AsmResolver.DotNet.Signatures.TypeSignature,System.Int64)">
            <summary>
            Interprets the handle as an array reference, and reads an element by its index.
            </summary>
            <param name="elementType">The type of elements the array stores.</param>
            <param name="index">The index of the element.</param>
            <returns>The bits of the element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadArrayElement(AsmResolver.DotNet.Signatures.TypeSignature,System.Int64,Echo.Memory.BitVectorSpan)">
            <summary>
            Interprets the handle as an array reference, and reads an element by its index.
            </summary>
            <param name="elementType">The type of elements the array stores.</param>
            <param name="index">The index of the element.</param>
            <param name="buffer">The buffer to write the bits of the element into.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.WriteArrayElement(AsmResolver.DotNet.Signatures.TypeSignature,System.Int64,Echo.Memory.BitVectorSpan)">
            <summary>
            Interprets the handle as an array reference, and writes a value to an element by its index.
            </summary>
            <param name="elementType">The type of elements the array stores.</param>
            <param name="index">The index of the element.</param>
            <param name="buffer">The bits of the element to write to the element.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadObjectData">
            <summary>
            Reads the data stored in the object (excluding the object header), and stores it in a bit vector.
            </summary>
            <returns>The object's data.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadObjectData(AsmResolver.DotNet.Signatures.TypeSignature)">
            <summary>
            Reads the data stored in the object (excluding the object header), and stores it in a bit vector.
            </summary>
            <param name="type">The type to interpret the object as.</param>
            <returns>The object's data.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ReadObjectData(Echo.Memory.BitVectorSpan)">
            <summary>
            Reads the data stored in the object (excluding the object header), and stores it in a bit vector.
            </summary>
            <param name="buffer">The buffer to write the data to.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.Equals(Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectHandle.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.ObjectMarshaller">
            <summary>
            Provides an implementation of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.IObjectMarshaller"/>, that embeds managed objects into the
            <see cref="T:Echo.Platforms.AsmResolver.Emulation.Heap.ObjectMapMemory"/> of the virtual machine. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectMarshaller.#ctor(Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine)">
            <summary>
            Creates a new marshaller for the provided virtual machine.
            </summary>
            <param name="machine">The machine.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ObjectMarshaller.Machine">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectMarshaller.ToBitVector(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectMarshaller.ToObject(Echo.Memory.BitVectorSpan,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectMarshaller.DeserializeStructure(Echo.Memory.BitVectorSpan,System.Type)">
            <summary>
            Deserialize the provided bit vector to a structure of the provided type.
            </summary>
            <param name="data">The raw data of the structure</param>
            <param name="targetType">The type of object to deserialize.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectMarshaller.DeserializeObject(System.Int64,System.Type)">
            <summary>
            Deserialize the provided object address to an object of the provided type.
            </summary>
            <param name="pointer">The pointer to the beginning of the object.</param>
            <param name="targetType">The type of object to deserialize.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.ObjectMarshallerExtensions">
            <summary>
            Provides extension methods to object marshalling services.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectMarshallerExtensions.ToObjectHandle(Echo.Platforms.AsmResolver.Emulation.IObjectMarshaller,System.Object)">
            <summary>
            Constructs an object handle that represents the provided object.
            </summary>
            <param name="self">The marshaller service.</param>
            <param name="obj">The object.</param>
            <returns>The handle containing the address to the marshalled object.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectMarshallerExtensions.ToObject``1(Echo.Platforms.AsmResolver.Emulation.IObjectMarshaller,Echo.Memory.BitVectorSpan)">
            <summary>
            Interprets the provided bit vector as an object of the provided type.
            </summary>
            <param name="self">The marshaller service.</param>
            <param name="vector">The vector.</param>
            <typeparam name="T">The type to marshal to.</typeparam>
            <returns>The marshalled object.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ObjectMarshallerExtensions.ToObject``1(Echo.Platforms.AsmResolver.Emulation.IObjectMarshaller,Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <summary>
            Interprets the provided object handle as an object of the provided type.
            </summary>
            <param name="self">The marshaller service.</param>
            <param name="handle">The address.</param>
            <typeparam name="T">The type to marshal to.</typeparam>
            <returns>The marshalled object.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.PELoader">
            <summary>
            Provides a mechanism for mapping portable executable files into virtual memory.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.PELoader.#ctor(Echo.Memory.VirtualMemory)">
            <summary>
            Creates a new instance of a PE loader.
            </summary>
            <param name="memory">The virtual memory to map the executables into.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.PELoader.MapModule(AsmResolver.DotNet.ModuleDefinition)">
            <summary>
            Maps a module into memory.
            </summary>
            <param name="module">The module to map.</param>
            <returns>The new base address of the PE file.</returns>
            <exception cref="T:System.ArgumentException">
            Occurs when the module does not have an underlying PE image or file.
            </exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.PELoader.MapPE(AsmResolver.PE.File.PEFile)">
            <summary>
            Maps all sections of the provided PE file into memory.
            </summary>
            <param name="file">The file to map.</param>
            <returns>The new base address of the PE file.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory">
            <summary>
            Provides a block of memory that contains mock data modelling CLR specific data structures.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory"/> block.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory.AddressRange">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory.MethodTables">
            <summary>
            Gets the memory assigned for method table structures (types).
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory.Methods">
            <summary>
            Gets the memory assigned for method descriptor structures.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory.MethodEntryPoints">
            <summary>
            Gets the memory assigned for method entry points
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory.Fields">
            <summary>
            Gets the memory assigned for field descriptor structures.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory.IsValidAddress(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory.Rebase(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory.Read(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory.Write(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.ClrMockMemory.Write(System.Int64,System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Runtime.RuntimeTypeManager">
            <summary>
            Provides a mechanism for initialization and management of types residing in a virtual machine.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.RuntimeTypeManager.#ctor(Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine)">
            <summary>
            Creates a new runtime type manager.
            </summary>
            <param name="machine">The machine the type is made for.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.RuntimeTypeManager.RegisterInitializationException(AsmResolver.DotNet.ITypeDescriptor,Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <summary>
            Registers the event that a type has failed to initialize. 
            </summary>
            <param name="type">The type that failed to initialize.</param>
            <param name="innerException">The exception object that describes the failure.</param>
            <returns>The resulting TypeInitializationException instance.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.RuntimeTypeManager.HandleInitialization(Echo.Platforms.AsmResolver.Emulation.CilThread,AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Handles the type initialization on the provided thread.
            </summary>
            <param name="thread">The thread the initialization is to be called on.</param>
            <param name="type">The type to initialize.</param>
            <returns>The initialization result.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Runtime.StaticFieldStorage">
            <summary>
            Represents a chunk of memory designated for storing static fields in a .NET process.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.StaticFieldStorage.#ctor(Echo.Platforms.AsmResolver.Emulation.ValueFactory,System.Int32)">
            <summary>
            Creates a new empty static field storage.
            </summary>
            <param name="valueFactory">The value factory responsible for measuring and constructing new values.</param>
            <param name="size">The maximum size of the storage.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.StaticFieldStorage.#ctor(Echo.Platforms.AsmResolver.Emulation.ValueFactory,Echo.Memory.Heap.IHeap)">
            <summary>
            Creates a new empty static field storage.
            </summary>
            <param name="valueFactory">The value factory responsible for measuring and constructing new values.</param>
            <param name="heap">The virtual heap to use for storing the field values.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Runtime.StaticFieldStorage.AddressRange">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.StaticFieldStorage.GetFieldAddress(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Gets the address of the provided field.
            </summary>
            <param name="field">The field.</param>
            <returns>The address.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.StaticFieldStorage.GetFieldSpan(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Obtains a writable bitvector slice that spans the value of the provided field. 
            </summary>
            <param name="field">The field.</param>
            <returns>The slice.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.StaticFieldStorage.IsValidAddress(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.StaticFieldStorage.Rebase(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.StaticFieldStorage.Read(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.StaticFieldStorage.Write(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.StaticFieldStorage.Write(System.Int64,System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Runtime.TypeInitializerResult">
            <summary>
            Describes a result of a type initialization.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Runtime.TypeInitializerResult.IsNoAction">
            <summary>
            Gets a value indicating whether the type initialization does not require any further action.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Runtime.TypeInitializerResult.IsRedirectedToConstructor">
            <summary>
            Gets a value indicating whether control was redirected to the class constructor of a type.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Runtime.TypeInitializerResult.ExceptionObject">
            <summary>
            Gets the exception that was thrown when initialization the type, if any.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.TypeInitializerResult.NoAction">
            <summary>
            Creates a result that indicates no further action was taken.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.TypeInitializerResult.Redirected">
            <summary>
            Creates a result that indicates control was redirected to a class constructor.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.TypeInitializerResult.Exception(Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <summary>
            Creates a result that throws a type initialization exception. 
            </summary>
            <param name="exception">The exception that was thrown.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Runtime.TypeInitializerResult.ToDispatchResult">
            <summary>
            Transforms the type initialization result into a <see cref="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatchResult"/>.
            </summary>
            <returns>The new dispatcher result.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Stack.CallEventArgs">
            <summary>
            Provides a description of events related to a frame in a call stack. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallEventArgs.Frame">
            <summary>
            Gets the call frame related to the event.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame">
            <summary>
            Represents a single frame in a virtual stack.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.#ctor(AsmResolver.DotNet.IMethodDescriptor,Echo.Platforms.AsmResolver.Emulation.ValueFactory)">
            <summary>
            Constructs a new call stack frame.
            </summary>
            <param name="method">The method that this frame is associated with.</param>
            <param name="factory">A factory used for measuring the size of the frame.</param>
            <exception cref="T:System.ArgumentException">
            Occurs when the provided method is invalid or contains invalid metadata that could not be dealt with.
            </exception>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.IsRoot">
            <summary>
            Gets a value indicating the frame is the root frame of the call stack.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.IsTrampoline">
            <summary>
            Gets a value indicating that the frame is a trampoline, and that it immediately returns the value of the next method on the stack
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.Method">
            <summary>
            Gets the method which this frame was associated with.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.Body">
            <summary>
            Gets the managed body of the method that this frame is associated with (if available).
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.LocalsCount">
            <summary>
            Gets the number of locals stored in the frame.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.ProgramCounter">
            <summary>
            Gets the offset within the method body of the next instruction to evaluate.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.EvaluationStack">
            <summary>
            Gets a virtual evaluation stack associated stored the frame.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.ExceptionHandlers">
            <summary>
            Gets a collection of exception handler frames present in the method body.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.ExceptionHandlerStack">
            <summary>
            Gets the stack of currently active exception handler frames in the method.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.Size">
            <summary>
            Gets the number of bytes (excluding the evaluation stack) the stack frame spans.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.CanAllocateMemory">
            <summary>
            Gets a value indicating whether the frame can be extended with extra stack memory.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.ConstrainedType">
            <summary>
            Gets or sets the current type that the following call instruction is constrained by, if any.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.AddressRange">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.IsValidAddress(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.Allocate(System.Int32)">
            <summary>
            Allocates local stack memory in the stack frame.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.Rebase(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.GetLocalAddress(System.Int32)">
            <summary>
            Gets the address (relative to the start of the frame) to a local variable in the frame. 
            </summary>
            <param name="index">The index of the local variable to get the address for.</param>
            <returns>The address</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the local index is invalid.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.ReadLocal(System.Int32)">
            <summary>
            Reads the value of a local variable into a buffer. 
            </summary>
            <param name="index">The index of the variable.</param>
            <returns>A bit vector with the current data of the local variable.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.ReadLocal(System.Int32,Echo.Memory.BitVectorSpan)">
            <summary>
            Reads the value of a local variable into a buffer. 
            </summary>
            <param name="index">The index of the variable.</param>
            <param name="buffer">The buffer to write the data into.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.WriteLocal(System.Int32,Echo.Memory.BitVectorSpan)">
            <summary>
            Assigns a new value to a local variable. 
            </summary>
            <param name="index">The index of the variable.</param>
            <param name="buffer">The buffer containing the new data.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.GetArgumentAddress(System.Int32)">
            <summary>
            Gets the address (relative to the start of the frame) to an argument in the frame. 
            </summary>
            <param name="index">The index of the argument to get the address for.</param>
            <returns>The address</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the argument index is invalid.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.ReadArgument(System.Int32)">
            <summary>
            Reads the value of a local variable into a buffer. 
            </summary>
            <param name="index">The index of the variable.</param>
            <returns>A bit vector with the current data of the argument.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.ReadArgument(System.Int32,Echo.Memory.BitVectorSpan)">
            <summary>
            Reads the value of an argument into a buffer. 
            </summary>
            <param name="index">The index of the argument to read.</param>
            <param name="buffer">The buffer to write the data into.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.WriteArgument(System.Int32,Echo.Memory.BitVectorSpan)">
            <summary>
            Assigns a new value to an argument. 
            </summary>
            <param name="index">The index of the argument.</param>
            <param name="buffer">The buffer containing the new data.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.Read(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.Write(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.Write(System.Int64,System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack">
            <summary>
            Represents a call stack consisting of frames, representing the current state of the program.
            </summary>
        </member>
        <member name="E:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.Called">
            <summary>
            Occurs when a new call frame is pushed onto the stack.
            </summary>
        </member>
        <member name="E:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.Returned">
            <summary>
            Occurs when a call frame was popped from the stack. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.#ctor(System.UInt32,Echo.Platforms.AsmResolver.Emulation.ValueFactory)">
            <summary>
            Creates a new virtual call stack.
            </summary>
            <param name="maxSize">The maximum number of bytes the stack can hold.</param>
            <param name="factory">The service responsible for managing types.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.AddressRange">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.StackPointer">
            <summary>
            Gets the current value of the stack pointer.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.GetFrameAddress(System.Int32)">
            <summary>
            Gets the address of a single frame in the stack.
            </summary>
            <param name="index">The index of the stack frame.</param>
            <returns>The address.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.IsValidAddress(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.Rebase(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.Read(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.Write(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.Write(System.Int64,System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.Push(AsmResolver.DotNet.IMethodDescriptor)">
            <summary>
            Creates a new call stack frame for the provided method and pushes it onto the top of the call stack.
            </summary>
            <param name="method">The method to create a frame for.</param>
            <returns>The created call stack frame.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.Push(Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame)">
            <summary>
            Pushes a call frame onto the stack.
            </summary>
            <param name="frame">The frame to push.</param>
            <exception cref="T:System.StackOverflowException">Occurs when the stack reached its maximum size.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.Pop">
            <summary>
            Pops the top-most frame from the stack.
            </summary>
            <returns>The popped frame.</returns>
            <exception cref="T:System.InvalidOperationException">Occurs when the stack is empty.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.OnCalled(Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame)">
            <summary>
            Fires the <see cref="E:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.Called"/> event.
            </summary>
            <param name="frame">The frame that was pushed.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.OnReturned(Echo.Platforms.AsmResolver.Emulation.Stack.CallFrame)">
            <summary>
            Fires the <see cref="E:Echo.Platforms.AsmResolver.Emulation.Stack.CallStack.Returned"/> event.
            </summary>
            <param name="frame">The frame that was popped.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.CallStackMemory.AddressRange">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStackMemory.IsValidAddress(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStackMemory.Rebase(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStackMemory.Read(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStackMemory.Write(System.Int64,Echo.Memory.BitVectorSpan)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.CallStackMemory.Write(System.Int64,System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Stack.EvaluationStack">
            <summary>
            Represents an evaluation stack during the execution of a managed method body.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.EvaluationStack.#ctor(Echo.Platforms.AsmResolver.Emulation.ValueFactory)">
            <summary>
            Creates a new evaluation stack.
            </summary>
            <param name="factory">The value factory to use.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.EvaluationStack.Push(Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <summary>
            Puts the address of the provided object handle into a pointer-sized bit vector, and pushes it onto the stack.
            </summary>
            <param name="value">The handle to push.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.EvaluationStack.Push(Echo.Memory.BitVectorSpan,AsmResolver.DotNet.Signatures.TypeSignature)">
            <summary>
            Marshals the provided bitvector into a stack slot, and pushes it onto the stack.
            </summary>
            <param name="value">The value to push.</param>
            <param name="originalType">The type of the value to push.</param>
            <returns>The stack slot that was created.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.EvaluationStack.Push(Echo.Memory.BitVector,AsmResolver.DotNet.Signatures.TypeSignature)">
            <summary>
            Marshals the provided bitvector into a stack slot, and pushes it onto the stack.
            </summary>
            <param name="value">The value to push.</param>
            <param name="originalType">The type of the value to push.</param>
            <returns>The stack slot that was created.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.EvaluationStack.Push(Echo.Memory.BitVector,AsmResolver.DotNet.Signatures.TypeSignature,System.Boolean)">
            <summary>
            Marshals the provided bitvector into a stack slot, and pushes it onto the stack.
            </summary>
            <param name="value">The value to push.</param>
            <param name="originalType">The type of the value to push.</param>
            <param name="releaseBitVector">
            <c>true</c> if <paramref name="value"/> should be returned to the bit vector pool, <c>false</c> if the caller
            should remain the owner of the bit vector.
            </param>
            <returns>The stack slot that was created.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.EvaluationStack.Pop(AsmResolver.DotNet.Signatures.TypeSignature)">
            <summary>
            Pops the top-most value from the stack, and reinterprets it according to the provided target type.
            </summary>
            <param name="targetType">The type of the value to pop.</param>
            <returns>The popped and marshalled value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.EvaluationStack.Clear">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame">
            <summary>
            Provides a mechanism for implementing exception handling for a single protected range within a single method body.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.#ctor(Echo.AddressRange)">
            <summary>
            Creates a new exception handler frame.
            </summary>
            <param name="protectedRange">The IL offset range the exception handler is protecting.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.ProtectedRange">
            <summary>
            Gets the IL offset range the exception handler is protecting.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.Handlers">
            <summary>
            Gets a list of handlers that are associated to the protected range.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.HasFinalizer">
            <summary>
            Gets a value indicating whether the exception handler has a finalizer block.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.CurrentHandler">
            <summary>
            Gets the current active exception handler (if available).
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.NextOffset">
            <summary>
            Gets the offset to jump to after a finalizer has exited (if available).
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.ExceptionObject">
            <summary>
            Gets the current exception object that was thrown within the protected range. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.IsProtecting">
            <summary>
            Gets a value indicating whether the frame is currently protecting the current instruction pointer.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.IsHandlingException">
            <summary>
            Gets a value indicating whether the exception handler is currently handling the exception referenced
            by <see cref="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.ExceptionObject"/>.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.ContainsOffset(System.Int32)">
            <summary>
            Determines whether the provided offset falls within the protected offset range or any of the handlers. 
            </summary>
            <param name="offset">The offset.</param>
            <returns><c>true</c> if the offset is within the frame, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.Reset">
            <summary>
            Resets the exception handler to its initial state.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.Enter">
            <summary>
            Attempts to enter the protected range.
            </summary>
            <returns><c>true</c> if the frame was entered, <c>false</c> if the frame was already entered before.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.RegisterException(Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <summary>
            Registers the occurrence of an exception, and determines the next offset to jump to that will attempt
            to handle the exception or finalize the code block.
            </summary>
            <param name="exceptionObject">The exception object.</param>
            <returns></returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.Leave(System.Int32)">
            <summary>
            Leaves either a protected range or an exception handler while marking the exception as handled successfully.
            </summary>
            <param name="leaveTargetOffset">The target offset to jump to.</param>
            <returns>The offset to jump to.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.EndFinally">
            <summary>
            Exits a finally block, and determines the next offset to jump to.
            </summary>
            <returns>The offset to jump to.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerFrame.EndFilter(System.Boolean)">
            <summary>
            Exits a filter clause, and determines the next offset to jump to.
            </summary>
            <param name="result">
            <c>true</c> if the exception should be handled by the current handler, <c>false</c> otherwise.
            </param>
            <returns>The offset to jump to.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerResult">
            <summary>
            Provides a discriminated union describing the result of an exception handler operation, containing either the
            next offset to jump to, or a handle to an unhandled exception object.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerResult.NextOffset">
            <summary>
            When <see cref="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerResult.IsSuccess"/> is <c>true</c>, contains the next IL offset to jump to within the current method. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerResult.ExceptionObject">
            <summary>
            When <see cref="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerResult.IsSuccess"/> is <c>false</c>, contains the handle to the unhandled exception that was thrown.   
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerResult.IsSuccess">
            <summary>
            Gets a value indicating whether the handler operation was successful.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerResult.Success(System.Int32)">
            <summary>
            Constructs a new successful exception handler result.
            </summary>
            <param name="offset">The next IL offset to jump to.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerResult.Exception(Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <summary>
            Constructs a new unsuccessful exception handler result.
            </summary>
            <param name="exceptionObject">The handle to the unhandled exception that was thrown.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerStack">
            <summary>
            Implements the exception handling mechanism within a single managed method.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerStack.RegisterException(Echo.Platforms.AsmResolver.Emulation.ObjectHandle)">
            <summary>
            Registers an exception, unwinds the exception handler stack and determines where to jump to within the
            current method.
            </summary>
            <param name="exceptionObject">The handle to the exception that was thrown.</param>
            <returns>
            The offset to jump to next within the method, or the exception object if the exception was not handled
            by the method.
            </returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerStack.Leave(System.Int32)">
            <summary>
            Safely leaves one or more exception handlers that are currently on the stack.
            </summary>
            <param name="targetOffset">The offset as indicated by the leave instruction.</param>
            <returns>The offset to jump to next.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerStack.EndFilter(System.Boolean)">
            <summary>
            Exits a filter clause with the provided result, and unwinds the exception handler stack if necessary.
            </summary>
            <param name="result">The result of the filter expression.</param>
            <returns>
            The offset to jump to next within the method, or the exception object if the exception was not handled
            by the method.
            </returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.ExceptionHandlerStack.EndFinally">
            <summary>
            Exits a finally clause, and unwinds the exception handler stack if necessary.
            </summary>
            <returns>
            The offset to jump to next within the method, or the exception object if the exception was not handled
            by the method.
            </returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot">
            <summary>
            Represents a single slot in the evaluation stack.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot.#ctor(Echo.Memory.BitVector,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlotTypeHint)">
            <summary>
            Creates a new stack slot.
            </summary>
            <param name="contents">The value stored in the slot.</param>
            <param name="typeHint">A type hint indicating how this value was pushed.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot.Contents">
            <summary>
            Gets the value stored in the slot.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot.TypeHint">
            <summary>
            Gets a type hint indicating how this value was pushed.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Stack.StackSlotTypeHint">
            <summary>
            Provides type hints indicating how a value was pushed onto the stack.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Stack.StackSlotTypeHint.Integer">
            <summary>
            Indicates the value was pushed as an integer.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Stack.StackSlotTypeHint.Float">
            <summary>
            Indicates the value was pushed as a floating point number.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Stack.StackSlotTypeHint.Structure">
            <summary>
            Indicates the value was pushed as a custom structure.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.StructHandle">
            <summary>
            Represents an address to a structure within a CIL virtual machine. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StructHandle.#ctor(Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine,System.Int64)">
            <summary>
            Creates a new struct handle from the provided address.
            </summary>
            <param name="machine">The machine the address is valid in.</param>
            <param name="address">The address.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.StructHandle.Machine">
            <summary>
            Gets the machine the structures lives in.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.StructHandle.Address">
            <summary>
            Gets the address to the beginning of the object.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StructHandle.GetFieldAddress(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Obtains the absolute address of a field within the structure.
            </summary>
            <param name="field">The field to obtain the address for.</param>
            <returns>The address.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StructHandle.ReadField(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Copies the value of a field into a new bit vector.
            </summary>
            <param name="field">The field to obtain the value for.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StructHandle.ReadField(AsmResolver.DotNet.IFieldDescriptor,Echo.Memory.BitVectorSpan)">
            <summary>
            Copies the value of a field into a bit vector.
            </summary>
            <param name="field">The field to obtain the value for.</param>
            <param name="buffer">The buffer to copy the value into.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StructHandle.WriteField(AsmResolver.DotNet.IFieldDescriptor,Echo.Memory.BitVectorSpan)">
            <summary>
            Copies the provided bit vector into a field of the object. 
            </summary>
            <param name="field">The field to write to.</param>
            <param name="buffer">The bits to write.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StructHandle.Equals(Echo.Platforms.AsmResolver.Emulation.StructHandle)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StructHandle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StructHandle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StructHandle.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.ThrowUnknownResolver">
            <summary>
            Provides an implementation of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.IUnknownResolver"/> that throws upon resolving an unknown value. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ThrowUnknownResolver.Instance">
            <summary>
            Gets the default instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.ThrowUnknownResolver"/> class.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ThrowUnknownResolver.ResolveBranchCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ThrowUnknownResolver.ResolveBranchCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ThrowUnknownResolver.ResolveSwitchCondition(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ThrowUnknownResolver.ResolveSourcePointer(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ThrowUnknownResolver.ResolveDestinationPointer(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ThrowUnknownResolver.ResolveBlockSize(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ThrowUnknownResolver.ResolveArrayIndex(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,System.Int64,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ThrowUnknownResolver.ResolveMethod(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,System.Collections.Generic.IList{Echo.Memory.BitVector})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ThrowUnknownResolver.ResolveExceptionFilter(Echo.Platforms.AsmResolver.Emulation.Dispatch.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Stack.StackSlot)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.ValueFactory">
            <summary>
            Provides a service for querying information about- and constructing new values.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.#ctor(AsmResolver.DotNet.ModuleDefinition,System.Boolean)">
            <summary>
            Creates a new value factory.
            </summary>
            <param name="contextModule">The manifest module to use for context.</param>
            <param name="is32Bit">A value indicating whether the environment is a 32-bit or 64-bit system.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.ContextModule">
            <summary>
            Gets the manifest module to use for context.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.Is32Bit">
            <summary>
            Gets a value indicating whether the environment is a 32-bit or 64-bit system.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.PointerSize">
            <summary>
            Gets the size in bytes of a pointer in the current environment.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.ClrMockMemory">
            <summary>
            Gets the CLR mock memory used for managing method tables (types).
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.DecimalType">
            <summary>
            Gets a reference to the <see cref="T:System.Decimal"/> type. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.DelegateType">
            <summary>
            Gets a reference to the <see cref="T:System.Delegate"/> type. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.DelegateTargetField">
            <summary>
            Get a reference to the <see cref="T:System.Delegate"/> _target field.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.DelegateMethodPtrField">
            <summary>
            Get a reference to the <see cref="T:System.Delegate"/> _methodPtr field.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.InvalidProgramExceptionType">
            <summary>
            Gets a reference to the <see cref="T:System.InvalidProgramException"/> type. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.TypeInitializationExceptionType">
            <summary>
            Gets a reference to the <see cref="T:System.TypeInitializationException"/> type. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.NullReferenceExceptionType">
            <summary>
            Gets a reference to the <see cref="T:System.NullReferenceException"/> type. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.IndexOutOfRangeExceptionType">
            <summary>
            Gets a reference to the <see cref="T:System.IndexOutOfRangeException"/> type. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.StackOverflowExceptionType">
            <summary>
            Gets a reference to the <see cref="T:System.StackOverflowException"/> type. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.MissingMethodExceptionType">
            <summary>
            Gets a reference to the <see cref="T:System.MissingMethodException"/> type. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.InvalidCastExceptionType">
            <summary>
            Gets a reference to the <see cref="T:System.InvalidCastException"/> type. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.OverflowExceptionType">
            <summary>
            Gets a reference to the <see cref="T:System.OverflowException"/> type. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.BitVectorPool">
            <summary>
            Gets the bitvector pool that this factory uses for creating and reusing bit vectors. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.Marshaller">
            <summary>
            Gets the service responsible for marshalling values into stack slots and back. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.ObjectHeaderSize">
            <summary>
            Gets the size of an object header.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.ArrayHeaderSize">
            <summary>
            Gets the number of bytes prepended to the data of the array.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.ArrayLengthOffset">
            <summary>
            Gets the offset within an array object that indexes the start of the Length field.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.StringHeaderSize">
            <summary>
            Gets the number of bytes prepended to the characters of the string.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ValueFactory.StringLengthOffset">
            <summary>
            Gets the offset within an string object that indexes the start of the Length field.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.GetArrayObjectSize(AsmResolver.DotNet.ITypeDescriptor,System.Int32)">
            <summary>
            Computes the total size of an array object.
            </summary>
            <param name="elementType">The type of elements the array stores.</param>
            <param name="elementCount">The number of elements.</param>
            <returns>The total size in bytes.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.GetStringObjectSize(System.Int32)">
            <summary>
            Computes the total size of a string object.
            </summary>
            <param name="length">The number of characters in the string.</param>
            <returns>The total size in bytes.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.GetObjectSize(AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Computes the total size of an object.
            </summary>
            <param name="type">The type of object to measure.</param>
            <returns>The total size in bytes.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.CreateNull">
            <summary>
            Creates a new native integer bit vector containing the null reference.
            </summary>
            <returns>The constructed bit vector.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.CreateNativeInteger(System.Boolean)">
            <summary>
            Creates a new native integer bit vector.
            </summary>
            <param name="initialize">
            <c>true</c> if the value should be set to 0, <c>false</c> if the integer should remain unknown.
            </param>
            <returns>The constructed bit vector.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.CreateNativeInteger(System.Int64)">
            <summary>
            Creates a new native integer bit vector.
            </summary>
            <param name="value">The value to initialize the integer with.</param>
            <returns>The constructed bit vector.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.CreateBoolean(Echo.Trilean)">
            <summary>
            Creates a new 32-bit vector from the bit vector pool containing the boolean value.
            </summary>
            <param name="value">The value.</param>
            <returns>The vector.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.RentNull">
            <summary>
            Rents a new native integer bit vector containing the null reference.
            </summary>
            <returns>The constructed bit vector.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.RentNativeInteger(System.Boolean)">
            <summary>
            Rents a native integer bit vector from the bit vector pool.
            </summary>
            <param name="initialize">
            <c>true</c> if the value should be set to 0, <c>false</c> if the integer should remain unknown.
            </param>
            <returns>The rented bit vector.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.RentNativeInteger(System.Int64)">
            <summary>
            Rents a native integer bit vector from the bit vector pool.
            </summary>
            <param name="value">The value to initialize the integer with.</param>
            <returns>The rented bit vector.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.RentBoolean(Echo.Trilean)">
            <summary>
            Rents a 32-bit vector from the bit vector pool containing the boolean value.
            </summary>
            <param name="value">The value.</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.CreateValue(AsmResolver.DotNet.Signatures.TypeSignature,System.Boolean)">
            <summary>
            Creates a new bit vector that can be used to represent an instance of the provided type.
            </summary>
            <param name="type">The type to represent.</param>
            <param name="initialize">
            <c>true</c> if the value should be set to 0, <c>false</c> if the value should remain unknown.
            </param>
            <returns>The constructed bit vector.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.RentValue(AsmResolver.DotNet.Signatures.TypeSignature,System.Boolean)">
            <summary>
            Rents a bit vector from the pool that can be used to represent an instance of the provided type.
            </summary>
            <param name="type">The type to represent.</param>
            <param name="initialize">
            <c>true</c> if the value should be set to 0, <c>false</c> if the value should remain unknown.
            </param>
            <returns>The rented bit vector.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.GetTypeValueMemoryLayout(AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Obtains the memory layout of a type in the current environment. If the provided type is a reference type,
            then it will measure the object reference itself, and not the contents behind the reference.
            </summary>
            <param name="type">The type to measure.</param>
            <returns>The measured layout.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the type could not be measured.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.GetTypeContentsMemoryLayout(AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Obtains the memory layout of a type in the current environment. If the provided type is a reference type,
            then it will measure the size of the contents behind the object reference. 
            </summary>
            <param name="type">The type to measure.</param>
            <returns>The measured layout.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the type could not be measured.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.GetFieldMemoryLayout(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Obtains memory layout information of a field.
            </summary>
            <param name="field">The field.</param>
            <returns>The memory layout information.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the field could not be resolved.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.ValueFactory.GetArrayElementOffset(AsmResolver.DotNet.Signatures.TypeSignature,System.Int64)">
            <summary>
            Calculates the offset to the element within an array. 
            </summary>
            <param name="elementType">The element type.</param>
            <param name="index">The element's index.</param>
            <returns>The offset, relative to the start of an array object.</returns>
        </member>
    </members>
</doc>
